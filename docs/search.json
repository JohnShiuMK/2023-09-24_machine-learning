[
  {
    "objectID": "03_reducing-generalization-error.html",
    "href": "03_reducing-generalization-error.html",
    "title": "Reducing Generalization Error",
    "section": "",
    "text": "Fundamental goal of ML: To generalize beyond what we see in the training samples\nWe often have access to only limited amount of training data, but we want to learn a mapping function which would predicts target reasonably well beyond that training data\nHowever, it’s impossible to access generalization error in practice!\nSolution (a common way): To reduce and approximate this error by Data Splitting"
  },
  {
    "objectID": "03_reducing-generalization-error.html#purpose",
    "href": "03_reducing-generalization-error.html#purpose",
    "title": "Reducing Generalization Error",
    "section": "",
    "text": "Fundamental goal of ML: To generalize beyond what we see in the training samples\nWe often have access to only limited amount of training data, but we want to learn a mapping function which would predicts target reasonably well beyond that training data\nHowever, it’s impossible to access generalization error in practice!\nSolution (a common way): To reduce and approximate this error by Data Splitting"
  },
  {
    "objectID": "03_reducing-generalization-error.html#how",
    "href": "03_reducing-generalization-error.html#how",
    "title": "Reducing Generalization Error",
    "section": "How?",
    "text": "How?\n\n80%-20% train-test split\n\n\n\nprepare df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\ndf\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n0\n-130.0437\n55.9773\nUSA\n\n\n1\n-134.4197\n58.3019\nUSA\n\n\n2\n-123.0780\n48.9854\nUSA\n\n\n3\n-122.7436\n48.9881\nUSA\n\n\n4\n-122.2691\n48.9951\nUSA\n\n\n...\n...\n...\n...\n\n\n204\n-72.7218\n45.3990\nCanada\n\n\n205\n-66.6458\n45.9664\nCanada\n\n\n206\n-79.2506\n42.9931\nCanada\n\n\n207\n-72.9406\n45.6275\nCanada\n\n\n208\n-79.4608\n46.3092\nCanada\n\n\n\n\n209 rows × 3 columns\n\n\n\n\nfrom sklearn.model_selection import train_test_split\ndf_1 = df.copy()\ny, X = df_1.pop(\"country\"), df_1\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\n\n\nalternative method (in case of performing exploratory data analysis or visualization on the df_train)\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\n# # or, via train_size,\n# df_train, df_test = train_test_split(\n#     df, train_size=0.8, random_state=123\n# )\n\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n\n\n\nvisualize training data\nimport mglearn\nimport matplotlib.pyplot as plt\n\nmglearn.discrete_scatter(X_train['longitude'], X_train['latitude'], y_train, s=12)\nplt.xlabel('longitude')\nplt.ylabel('latitude')\n\n\nText(0, 0.5, 'latitude')\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\nprint(f\"Train accuracy: {round(clf.score(X_train, y_train), 3)}\")\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error\n\nTrain accuracy: 1.0\nTest accuracy: 0.738\n\n\n\nCons\n\nApproximated the generalization error, but not reduced yet.\nWe have built a perfect model on training data, but our model is not able to generalize well on the testing data!\n\n\n\n\nTrain-validation-test split\n\nWe train our model using train split\nAnd score it using validation split\nIf the score is not good, then we train another model using train split and score it again using validation split\nRepeat the process until reaching a satisfactory score in the validation split (i.e. hyperparameter tuning)\nTest the model once to examine the generalization \n\n\n\n\n\nfit\nscore\npredict\n\n\n\n\nTrain\n✔️\n✔️\n✔️\n\n\nValidation\n\n✔️\n✔️\n\n\nTest\n\nonce\nonce\n\n\nDeployment\n\n\n✔️\n\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ndf_train, df_validation = train_test_split(\n    df_train, test_size=0.25, random_state=123\n)\n\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_validation, X_validation = df_validation.pop(\"country\"), df_validation\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    clf.fit(X_train, y_train)\n\n    #print(f\"Train accuracy (max_depth={depth}): {round(clf.score(X_train, y_train), 3)}\")\n    print(f\"Validation accuracy (max_depth={depth}): {round(clf.score(X_validation, y_validation), 3)}\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error\n\nValidation accuracy (max_depth=1): 0.81\nValidation accuracy (max_depth=2): 0.81\nValidation accuracy (max_depth=3): 0.833\nValidation accuracy (max_depth=4): 0.833\nValidation accuracy (max_depth=5): 0.905\nValidation accuracy (max_depth=6): 0.881\nTest accuracy: 0.762\n\n\nWe typically expect \\(E_{train} &lt; E_{validation} &lt; E_{test} &lt; E_{deployment}\\).\n\nPros\n\nAble to reduce and approximate generalization error\nMuch better than Train-test split, in which we have only examined the training accuracy before looking at testing.\n\n\n\nCons\n\nIf the data set is small, then the validation set will be tiny and will not be a good representative of testing set.\n\n\n\n\nCross-validation\n\nSplit the training data into k-fold\nEach “fold” takes turn to be a validation set\nValidation score statistics = mean/variance of each cross-validation score (scores across folds) \n\n\ntraining and validation\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# train model and score\nclf = DecisionTreeClassifier(max_depth=4)\n\nscores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\npd.DataFrame(scores)\n\n\n\n\n\n\n\n\nfit_time\nscore_time\ntest_score\ntrain_score\n\n\n\n\n0\n0.002524\n0.002084\n0.764706\n0.913333\n\n\n1\n0.002855\n0.002135\n0.823529\n0.906667\n\n\n2\n0.001225\n0.000673\n0.705882\n0.906667\n\n\n3\n0.001533\n0.000713\n0.941176\n0.900000\n\n\n4\n0.000889\n0.000631\n0.823529\n0.906667\n\n\n5\n0.000849\n0.000594\n0.823529\n0.913333\n\n\n6\n0.001619\n0.000639\n0.705882\n0.920000\n\n\n7\n0.001016\n0.000566\n0.937500\n0.900662\n\n\n8\n0.000744\n0.000459\n0.937500\n0.900662\n\n\n9\n0.000704\n0.000463\n0.937500\n0.900662\n\n\n\n\n\n\n\n\nprint(f\"Average cv scores: {round(scores['test_score'].mean(), 2)}\")\nprint(f\"SD of cv scores: {round(scores['test_score'].var()**0.5, 2)}\")\n\nAverage cv scores: 0.84\nSD of cv scores: 0.09\n\n\n\n\ntraining, validation and testing\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    \n    scores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\n\n    print(f\"Average cv scores (max_depth={depth}): {round(scores['test_score'].mean(), 3)}\")\n    print(f\"SD of cv scores (max_depth={depth}): {round(scores['test_score'].var()**0.5, 3)}\\n\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error, comparable to cv error\n\nAverage cv scores (max_depth=1): 0.81\nSD of cv scores (max_depth=1): 0.085\n\nAverage cv scores (max_depth=2): 0.804\nSD of cv scores (max_depth=2): 0.086\n\nAverage cv scores (max_depth=3): 0.804\nSD of cv scores (max_depth=3): 0.09\n\nAverage cv scores (max_depth=4): 0.84\nSD of cv scores (max_depth=4): 0.09\n\nAverage cv scores (max_depth=5): 0.846\nSD of cv scores (max_depth=5): 0.083\n\nAverage cv scores (max_depth=6): 0.815\nSD of cv scores (max_depth=6): 0.061\n\nTest accuracy: 0.833\n\n\n\n\nPros\n\nMore powerful, also applied to small data set!\nAble to examine the variation in the scores across folds\nGive a more robust estimate of error on unseen data"
  },
  {
    "objectID": "03_reducing-generalization-error.html#remarks",
    "href": "03_reducing-generalization-error.html#remarks",
    "title": "Reducing Generalization Error",
    "section": "Remarks",
    "text": "Remarks\n\nWe use test error to approximate generalization error (or deployment error)\nIf the test error is “reasonable”, we will deploy the model\nWe typically expect \\(E_{\\text{train}} &lt; E_{\\text{validation}} &lt; E_{\\text{test}} &lt; E_{\\text{deployment}} &lt; E_{\\text{best}}\\).\n\n\nWhat is underfitting?\n\nThe model is too simple\nBoth train and validation error are similarly high\n\\(E_{\\text{best}} &lt; E_{\\text{train}} \\lesssim E_{\\text{validation}}\\)\n\n\n\nWhat is overfitting?\n\nThe model is too complicated, and specified to training data only\nTraining error is too low, and a big gap exists between training and validation error\n\\(E_{\\text{train}} &lt; E_{\\text{best}} &lt; E_{\\text{validation}}\\)\n\n\n\nWhat is Bias vs. Variance tradeoff?\n\nA fundamental tradeoff in supervised learning\n\nComplexity \\(\\uparrow\\) \\(\\Rightarrow\\) \\(E_\\text{train} \\downarrow\\) but \\((E_\\text{validation} - E_\\text{train}) \\uparrow\\)\n\nBias \\(\\Leftrightarrow\\) Underfitting: the tendency to consistently learn the same wrong thing\nVariance \\(\\Leftrightarrow\\) Overfitting: the tendency to learn random things irrespective of real signals\n\n source\n\n\nGolden rule: The test data cannot influence the training phase in any way\n\nTo avoid breaking it, we always keep our testing set in an imaginary vault when we’re splitting data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "😂",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "02_decision-tree.html",
    "href": "02_decision-tree.html",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#use-case",
    "href": "02_decision-tree.html#use-case",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#what-is-it",
    "href": "02_decision-tree.html#what-is-it",
    "title": "Decision Tree",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: ???\n\nAt each node, the algorithm learns/decides\n\nwhich feature is the most useful for classification at that point\nwhat threshold to use\nobjective: to reduce impurity at each node\n\n\nFor regression: ???"
  },
  {
    "objectID": "02_decision-tree.html#how",
    "href": "02_decision-tree.html#how",
    "title": "Decision Tree",
    "section": "How?",
    "text": "How?\n\n\ndefine display_tree\n# Reference: DSCI_571_sup-learn-1/lectures/code/utils.py\nimport re \nimport graphviz\n\nfrom sklearn.tree import export_graphviz\n\ndef display_tree(feature_names, tree, counts=False):\n    \"\"\" For binary classification only \"\"\"\n    dot = export_graphviz(\n        tree,\n        out_file=None,\n        feature_names=feature_names,\n        class_names=tree.classes_.astype(str),\n        impurity=False,\n    )    \n    # adapted from https://stackoverflow.com/questions/44821349/python-graphviz-remove-legend-on-nodes-of-decisiontreeclassifier\n    # dot = re.sub('(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])(\\\\\\\\nclass = [A-Za-z0-9]+)', '', dot)\n    if counts: \n        dot = re.sub(\"(samples = [0-9]+)\\\\\\\\n\", \"\", dot)\n        dot = re.sub(\"value\", \"counts\", dot)\n    else:\n        dot = re.sub(\"(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\", \"\", dot)\n        dot = re.sub(\"(samples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\\\\\\\\n\", \"\", dot)\n\n    return graphviz.Source(dot)\n\n\n\n\ndefine plot_tree_decision_boundary_and_tree\n# Reference: DSCI_571_sup-learn-1_students/lectures/code/plotting_functions.py\nimport matplotlib.pyplot as plt\nimport mglearn\nfrom sklearn.tree import plot_tree\n\n# Custom function to customize the tree plot and hide values and samples\ndef custom_plot_tree(tree_model, feature_names=None, class_names=None, **kwargs):\n    \"\"\"\n    Customizes and displays a tree plot for a scikit-learn Decision Tree Classifier.\n\n    Parameters:\n    - tree (sklearn.tree.DecisionTreeClassifier): The trained Decision Tree Classifier to visualize.\n    - width: width of the matplotlib plot in inches \n    - height: height of the matplotlib plot in inches \n    - feature_names (list or None): A list of feature names to label the tree nodes with feature names.\n                                    If None, generic feature names will be used.\n    - class_names (list or None): A list of class names to label the tree nodes with class names.\n                                  If None, generic class names will be used.\n    - **kwargs: Additional keyword arguments to be passed to the `sklearn.tree.plot_tree` function.\n\n    Returns:\n    - None: The function displays the customized tree plot using Matplotlib.\n    \n    This function customizes the appearance of a Decision Tree plot generated by the scikit-learn\n    `plot_tree` function. It hides both the samples and values in each node of the tree plot\n    for improved visualization.\n    \"\"\"    \n    plot_tree(tree_model, \n              feature_names=feature_names, \n              class_names=class_names, \n              filled=True, \n              **kwargs)\n    \n    # Customize the appearance of the text elements for each node\n    for text in plt.gca().texts:\n        new_text = re.sub('samples = \\d+\\n', '', text.get_text()) # Hide samples\n        text.set_text(new_text) \n    \n    plt.show()\n\ndef plot_tree_decision_boundary(\n    model, X, y, x_label=\"x-axis\", y_label=\"y-axis\", eps=None, ax=None, title=None\n):\n    if ax is None:\n        ax = plt.gca()\n\n    if title is None:\n        title = \"max_depth=%d\" % (model.tree_.max_depth)\n\n    mglearn.plots.plot_2d_separator(\n        model, X.to_numpy(), eps=eps, fill=True, alpha=0.5, ax=ax\n    )\n    mglearn.discrete_scatter(X.iloc[:, 0], X.iloc[:, 1], y, ax=ax)\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.set_title(title)\n\ndef plot_tree_decision_boundary_and_tree(\n    model, X, y, height=6, width=16, fontsize = 9, x_label=\"x-axis\", y_label=\"y-axis\", eps=None\n):\n    fig, ax = plt.subplots(\n        1,\n        2,\n        figsize=(width, height),\n        subplot_kw={\"xticks\": (), \"yticks\": ()},\n        gridspec_kw={\"width_ratios\": [1.5, 2]},\n    )\n    plot_tree_decision_boundary(model, X, y, x_label, y_label, eps, ax=ax[0])\n    custom_plot_tree(model, \n                 feature_names=X.columns.tolist(), \n                 class_names=['A+', 'not A+'],\n                 impurity=False,\n                 fontsize=fontsize, ax=ax[1])\n    ax[1].set_axis_off()\n    plt.show()\n\n\n\nClassification\n\n\nread df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\nA+\n\n\n1\n1\n0\n94\n90\n80\n83\n91\nnot A+\n\n\n2\n0\n0\n78\n85\n83\n80\n80\nnot A+\n\n\n3\n0\n1\n91\n94\n92\n91\n89\nA+\n\n\n4\n0\n1\n77\n83\n90\n92\n85\nA+\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ny, X = df.pop(\"quiz2\"), df\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\nclf.predict(X)\n\narray(['A+', 'not A+', 'not A+', 'A+', 'A+', 'not A+', 'A+', 'not A+',\n       'not A+', 'not A+', 'A+', 'A+', 'A+', 'A+', 'not A+', 'not A+',\n       'A+', 'not A+', 'not A+', 'not A+', 'A+'], dtype=object)\n\n\n\nclf.score(X, y) # accuracy\n\n1.0\n\n\n\ndisplay_tree(X.columns, clf)\n\n\n\n\n\nDecision stump\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = df[['lab4', 'quiz1']]\n\nclf = DecisionTreeClassifier(max_depth=1)\nclf.fit(X, y)\nclf.predict(X)\n\nplot_tree_decision_boundary_and_tree(clf, X, y, x_label='lab4', y_label='quiz1')\n\n/Users/johnshiu/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n  warnings.warn(\n\n\n\n\n\n\n\n\nRegression\n\n\nread df\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n90\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n84\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n82\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n92\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n90\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ny, X = df.pop(\"quiz2\"), df\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2 (it can be -ve, which is worse than DummyRegressor)\n\n0.0"
  },
  {
    "objectID": "02_decision-tree.html#hyperparameters",
    "href": "02_decision-tree.html#hyperparameters",
    "title": "Decision Tree",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\ncriterion for minimizing impurity\n\n(DecisionTreeClassifier) Default: gini\n\ngini: gini index\nentropy: cross entropy\nlog_loss: information gain\n\n(DecisionTreeRegressor) Default: squared_error\n\n{squared_error, friedman_mse, absolute_error, poisson}\n\n\nmax_depth, maximum tree depth. Default: None\n\nIf None, the decision tree could be creating very specific rules, based on just one example from the data\nIf max_depth = 1, the tree is called Decision stump\n\nmin_samples_split\nmin_samples_leaf\nmax_leaf_nodes"
  },
  {
    "objectID": "02_decision-tree.html#pros",
    "href": "02_decision-tree.html#pros",
    "title": "Decision Tree",
    "section": "Pros",
    "text": "Pros"
  },
  {
    "objectID": "02_decision-tree.html#cons",
    "href": "02_decision-tree.html#cons",
    "title": "Decision Tree",
    "section": "Cons",
    "text": "Cons"
  },
  {
    "objectID": "02_decision-tree.html#remarks",
    "href": "02_decision-tree.html#remarks",
    "title": "Decision Tree",
    "section": "Remarks",
    "text": "Remarks\n\n?DecisionTreeClassifier\n\n?DecisionTreeClassifier\n\n\nInit signature:\nDecisionTreeClassifier(\n    *,\n    criterion='gini',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    class_weight=None,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree classifier.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n    The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nclass_weight : dict, list of dict or \"balanced\", default=None\n    Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n    For multi-output, the weights of each column of y will be multiplied.\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nclasses_ : ndarray of shape (n_classes,) or list of ndarray\n    The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem).\nfeature_importances_ : ndarray of shape (n_features,)\n    The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_classes_ : int or list of int\n    The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems).\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeRegressor : A decision tree regressor.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_iris\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeClassifier\n&gt;&gt;&gt; clf = DecisionTreeClassifier(random_state=0)\n&gt;&gt;&gt; iris = load_iris()\n&gt;&gt;&gt; cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeClassifier\n\n\n\n\n\n?DecisionTreeRegressor\n\n?DecisionTreeRegressor\n\n\nInit signature:\nDecisionTreeRegressor(\n    *,\n    criterion='squared_error',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree regressor.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"\n    The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n    .. versionadded:: 0.24\n        Poisson deviance criterion.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nfeature_importances_ : ndarray of shape (n_features,)\n    The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeClassifier : A decision tree classifier.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_diabetes\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeRegressor\n&gt;&gt;&gt; X, y = load_diabetes(return_X_y=True)\n&gt;&gt;&gt; regressor = DecisionTreeRegressor(random_state=0)\n&gt;&gt;&gt; cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeRegressor\n\n\n\n\n\nCode\n# import numpy as np\n# X_binary = X.copy()\n# X_binary.loc[:,\"lab1\":\"quiz1\"] = X_binary.loc[:,\"lab1\":\"quiz1\"].apply(lambda x: np.where(x &gt;= 90, 1, 0))\n\n# from sklearn.tree import DecisionTreeClassifier\n# clf = DecisionTreeClassifier()\n# clf.fit(X_binary, y)\n# clf.predict(X_binary)\n\n# clf.score(X_binary, y) # accuracy\n\n# display_tree(X_binary.columns, clf)"
  },
  {
    "objectID": "01_dummy.html",
    "href": "01_dummy.html",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#use-case",
    "href": "01_dummy.html#use-case",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#what-is-it",
    "href": "01_dummy.html#what-is-it",
    "title": "Dummy Classifier/Regressor",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: use the mode of y_train to predict y_test\nFor regression: use the mean / median / constant value of y_train to predict y_test"
  },
  {
    "objectID": "01_dummy.html#how",
    "href": "01_dummy.html#how",
    "title": "Dummy Classifier/Regressor",
    "section": "How?",
    "text": "How?\n\nClassification\n\n\nread df\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ndf\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyClassifier\ny, X = df.pop(\"quiz2\"), df\n\nclf = DummyClassifier(strategy=\"most_frequent\")\nclf.fit(X, y)\nclf.predict(X)\n\narray(['not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+'], dtype='&lt;U6')\n\n\n\nclf.score(X, y) # accuracy\n\n0.5238095238095238\n\n\n\n\nRegression\n\n\nread df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyRegressor\ny, X = df.pop(\"quiz2\"), df\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2\n\n0.0"
  },
  {
    "objectID": "01_dummy.html#hyperparameters",
    "href": "01_dummy.html#hyperparameters",
    "title": "Dummy Classifier/Regressor",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nstrategy\n\n(DummyClassifier) {“most_frequent”, “prior”, “stratified”, “uniform”, “constant”}. Default: “prior”\n(DummyRegressor) {“mean”, “median”, “quantile”, “constant”}. Default: “mean”\n\nconstant\n\nspecified if strategy = \"constant\"\nfor DummyClassifier, the constant must exist in the y"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "0102_decision-tree.html",
    "href": "0102_decision-tree.html",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "0102_decision-tree.html#use-case",
    "href": "0102_decision-tree.html#use-case",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "0102_decision-tree.html#what-is-it",
    "href": "0102_decision-tree.html#what-is-it",
    "title": "Decision Tree",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: ???\n\nAt each node, the algorithm learns/decides\n\nwhich feature is the most useful for classification at that point\nwhat threshold to use\nobjective: to reduce impurity at each node\n\n\nFor regression: ???"
  },
  {
    "objectID": "0102_decision-tree.html#how",
    "href": "0102_decision-tree.html#how",
    "title": "Decision Tree",
    "section": "How?",
    "text": "How?\n\n\ndefine display_tree\n# Reference: DSCI_571_sup-learn-1/lectures/code/utils.py\nimport re \nimport graphviz\n\nfrom sklearn.tree import export_graphviz\n\ndef display_tree(feature_names, tree, counts=False):\n    \"\"\" For binary classification only \"\"\"\n    dot = export_graphviz(\n        tree,\n        out_file=None,\n        feature_names=feature_names,\n        class_names=tree.classes_.astype(str),\n        impurity=False,\n    )    \n    # adapted from https://stackoverflow.com/questions/44821349/python-graphviz-remove-legend-on-nodes-of-decisiontreeclassifier\n    # dot = re.sub('(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])(\\\\\\\\nclass = [A-Za-z0-9]+)', '', dot)\n    if counts: \n        dot = re.sub(\"(samples = [0-9]+)\\\\\\\\n\", \"\", dot)\n        dot = re.sub(\"value\", \"counts\", dot)\n    else:\n        dot = re.sub(\"(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\", \"\", dot)\n        dot = re.sub(\"(samples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\\\\\\\\n\", \"\", dot)\n\n    return graphviz.Source(dot)\n\n\n\n\ndefine plot_tree_decision_boundary_and_tree\n# Reference: DSCI_571_sup-learn-1_students/lectures/code/plotting_functions.py\nimport matplotlib.pyplot as plt\nimport mglearn\nfrom sklearn.tree import plot_tree\n\n# Custom function to customize the tree plot and hide values and samples\ndef custom_plot_tree(tree_model, feature_names=None, class_names=None, **kwargs):\n    \"\"\"\n    Customizes and displays a tree plot for a scikit-learn Decision Tree Classifier.\n\n    Parameters:\n    - tree (sklearn.tree.DecisionTreeClassifier): The trained Decision Tree Classifier to visualize.\n    - width: width of the matplotlib plot in inches \n    - height: height of the matplotlib plot in inches \n    - feature_names (list or None): A list of feature names to label the tree nodes with feature names.\n                                    If None, generic feature names will be used.\n    - class_names (list or None): A list of class names to label the tree nodes with class names.\n                                  If None, generic class names will be used.\n    - **kwargs: Additional keyword arguments to be passed to the `sklearn.tree.plot_tree` function.\n\n    Returns:\n    - None: The function displays the customized tree plot using Matplotlib.\n    \n    This function customizes the appearance of a Decision Tree plot generated by the scikit-learn\n    `plot_tree` function. It hides both the samples and values in each node of the tree plot\n    for improved visualization.\n    \"\"\"    \n    plot_tree(tree_model, \n              feature_names=feature_names, \n              class_names=class_names, \n              filled=True, \n              **kwargs)\n    \n    # Customize the appearance of the text elements for each node\n    for text in plt.gca().texts:\n        new_text = re.sub('samples = \\d+\\n', '', text.get_text()) # Hide samples\n        text.set_text(new_text) \n    \n    plt.show()\n\ndef plot_tree_decision_boundary(\n    model, X, y, x_label=\"x-axis\", y_label=\"y-axis\", eps=None, ax=None, title=None\n):\n    if ax is None:\n        ax = plt.gca()\n\n    if title is None:\n        title = \"max_depth=%d\" % (model.tree_.max_depth)\n\n    mglearn.plots.plot_2d_separator(\n        model, X.to_numpy(), eps=eps, fill=True, alpha=0.5, ax=ax\n    )\n    mglearn.discrete_scatter(X.iloc[:, 0], X.iloc[:, 1], y, ax=ax)\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.set_title(title)\n\ndef plot_tree_decision_boundary_and_tree(\n    model, X, y, height=6, width=16, fontsize = 9, x_label=\"x-axis\", y_label=\"y-axis\", eps=None\n):\n    fig, ax = plt.subplots(\n        1,\n        2,\n        figsize=(width, height),\n        subplot_kw={\"xticks\": (), \"yticks\": ()},\n        gridspec_kw={\"width_ratios\": [1.5, 2]},\n    )\n    plot_tree_decision_boundary(model, X, y, x_label, y_label, eps, ax=ax[0])\n    custom_plot_tree(model, \n                 feature_names=X.columns.tolist(), \n                 class_names=['A+', 'not A+'],\n                 impurity=False,\n                 fontsize=fontsize, ax=ax[1])\n    ax[1].set_axis_off()\n    plt.show()\n\n\n\nClassification\n\n\nread df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\nA+\n\n\n1\n1\n0\n94\n90\n80\n83\n91\nnot A+\n\n\n2\n0\n0\n78\n85\n83\n80\n80\nnot A+\n\n\n3\n0\n1\n91\n94\n92\n91\n89\nA+\n\n\n4\n0\n1\n77\n83\n90\n92\n85\nA+\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ny, X = df.pop(\"quiz2\"), df\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\nclf.predict(X)\n\narray(['A+', 'not A+', 'not A+', 'A+', 'A+', 'not A+', 'A+', 'not A+',\n       'not A+', 'not A+', 'A+', 'A+', 'A+', 'A+', 'not A+', 'not A+',\n       'A+', 'not A+', 'not A+', 'not A+', 'A+'], dtype=object)\n\n\n\nclf.score(X, y) # accuracy\n\n1.0\n\n\n\ndisplay_tree(X.columns, clf)\n\n\n\n\n\nDecision stump\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = df[['lab4', 'quiz1']]\n\nclf = DecisionTreeClassifier(max_depth=1)\nclf.fit(X, y)\nclf.predict(X)\n\nplot_tree_decision_boundary_and_tree(clf, X, y, x_label='lab4', y_label='quiz1')\n\n/Users/johnshiu/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n  warnings.warn(\n\n\n\n\n\n\n\n\nRegression\n\n\nread df\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n90\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n84\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n82\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n92\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n90\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ny, X = df.pop(\"quiz2\"), df\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2 (it can be -ve, which is worse than DummyRegressor)\n\n0.0"
  },
  {
    "objectID": "0102_decision-tree.html#hyperparameters",
    "href": "0102_decision-tree.html#hyperparameters",
    "title": "Decision Tree",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\ncriterion for minimizing impurity\n\n(DecisionTreeClassifier) Default: gini\n\ngini: gini index\nentropy: cross entropy\nlog_loss: information gain\n\n(DecisionTreeRegressor) Default: squared_error\n\n{squared_error, friedman_mse, absolute_error, poisson}\n\n\nmax_depth, maximum tree depth. Default: None\n\nIf None, the decision tree could be creating very specific rules, based on just one example from the data\nIf max_depth = 1, the tree is called Decision stump\n\nmin_samples_split\nmin_samples_leaf\nmax_leaf_nodes"
  },
  {
    "objectID": "0102_decision-tree.html#pros",
    "href": "0102_decision-tree.html#pros",
    "title": "Decision Tree",
    "section": "Pros",
    "text": "Pros"
  },
  {
    "objectID": "0102_decision-tree.html#cons",
    "href": "0102_decision-tree.html#cons",
    "title": "Decision Tree",
    "section": "Cons",
    "text": "Cons"
  },
  {
    "objectID": "0102_decision-tree.html#remarks",
    "href": "0102_decision-tree.html#remarks",
    "title": "Decision Tree",
    "section": "Remarks",
    "text": "Remarks\n\n?DecisionTreeClassifier\n\n?DecisionTreeClassifier\n\n\nInit signature:\nDecisionTreeClassifier(\n    *,\n    criterion='gini',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    class_weight=None,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree classifier.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n    The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nclass_weight : dict, list of dict or \"balanced\", default=None\n    Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n    For multi-output, the weights of each column of y will be multiplied.\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nclasses_ : ndarray of shape (n_classes,) or list of ndarray\n    The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem).\nfeature_importances_ : ndarray of shape (n_features,)\n    The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_classes_ : int or list of int\n    The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems).\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeRegressor : A decision tree regressor.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_iris\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeClassifier\n&gt;&gt;&gt; clf = DecisionTreeClassifier(random_state=0)\n&gt;&gt;&gt; iris = load_iris()\n&gt;&gt;&gt; cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeClassifier\n\n\n\n\n\n?DecisionTreeRegressor\n\n?DecisionTreeRegressor\n\n\nInit signature:\nDecisionTreeRegressor(\n    *,\n    criterion='squared_error',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree regressor.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"\n    The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n    .. versionadded:: 0.24\n        Poisson deviance criterion.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nfeature_importances_ : ndarray of shape (n_features,)\n    The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeClassifier : A decision tree classifier.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_diabetes\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeRegressor\n&gt;&gt;&gt; X, y = load_diabetes(return_X_y=True)\n&gt;&gt;&gt; regressor = DecisionTreeRegressor(random_state=0)\n&gt;&gt;&gt; cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeRegressor\n\n\n\n\n\nCode\n# import numpy as np\n# X_binary = X.copy()\n# X_binary.loc[:,\"lab1\":\"quiz1\"] = X_binary.loc[:,\"lab1\":\"quiz1\"].apply(lambda x: np.where(x &gt;= 90, 1, 0))\n\n# from sklearn.tree import DecisionTreeClassifier\n# clf = DecisionTreeClassifier()\n# clf.fit(X_binary, y)\n# clf.predict(X_binary)\n\n# clf.score(X_binary, y) # accuracy\n\n# display_tree(X_binary.columns, clf)"
  },
  {
    "objectID": "0101_dummy.html",
    "href": "0101_dummy.html",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "0101_dummy.html#use-case",
    "href": "0101_dummy.html#use-case",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "0101_dummy.html#what-is-it",
    "href": "0101_dummy.html#what-is-it",
    "title": "Dummy Classifier/Regressor",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: use the mode of y_train to predict y_test\nFor regression: use the mean / median / constant value of y_train to predict y_test"
  },
  {
    "objectID": "0101_dummy.html#how",
    "href": "0101_dummy.html#how",
    "title": "Dummy Classifier/Regressor",
    "section": "How?",
    "text": "How?\n\nClassification\n\n\nread df\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ndf\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyClassifier\ny, X = df.pop(\"quiz2\"), df\n\nclf = DummyClassifier(strategy=\"most_frequent\")\nclf.fit(X, y)\nclf.predict(X)\n\narray(['not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+'], dtype='&lt;U6')\n\n\n\nclf.score(X, y) # accuracy\n\n0.5238095238095238\n\n\n\n\nRegression\n\n\nread df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyRegressor\ny, X = df.pop(\"quiz2\"), df\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2\n\n0.0"
  },
  {
    "objectID": "0101_dummy.html#hyperparameters",
    "href": "0101_dummy.html#hyperparameters",
    "title": "Dummy Classifier/Regressor",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nstrategy\n\n(DummyClassifier) {“most_frequent”, “prior”, “stratified”, “uniform”, “constant”}. Default: “prior”\n(DummyRegressor) {“mean”, “median”, “quantile”, “constant”}. Default: “mean”\n\nconstant\n\nspecified if strategy = \"constant\"\nfor DummyClassifier, the constant must exist in the y"
  },
  {
    "objectID": "0104_svm-rbf.html",
    "href": "0104_svm-rbf.html",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "",
    "text": "Similar to kNN?"
  },
  {
    "objectID": "0104_svm-rbf.html#use-case",
    "href": "0104_svm-rbf.html#use-case",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "",
    "text": "Similar to kNN?"
  },
  {
    "objectID": "0104_svm-rbf.html#what-is-it",
    "href": "0104_svm-rbf.html#what-is-it",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "What is it?",
    "text": "What is it?\n\nAnalogy-Based Model\n\ni.e. assigned nearby points the same label\n\nSimilar to weighted \\(k\\)-NN, however, the decision boundary only depends on support vectors (key examples in the dataset)\nDefine decision boundary by a subset of +ve, -ve examples, their weights and similarity measure\n\nTest example = +ve if it looks more like a +ve example than -ve\nThe similarity metric is called kernel\n\nPopular kernel: Radial Basis Functions (RBFs)\n\nDecision boundary \\(\\sim\\) a smooth version of k-NN’s decision boundary"
  },
  {
    "objectID": "0104_svm-rbf.html#how",
    "href": "0104_svm-rbf.html#how",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "How?",
    "text": "How?\n\nClassification\n\n\nprepare X_train, X_test, y_train, y_test\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\n\ny, X = df.pop(\"country\"), df\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\npd.concat([X_train, y_train], axis=1).head()\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n160\n-76.4813\n44.2307\nCanada\n\n\n127\n-81.2496\n42.9837\nCanada\n\n\n169\n-66.0580\n45.2788\nCanada\n\n\n188\n-73.2533\n45.3057\nCanada\n\n\n187\n-67.9245\n47.1652\nCanada\n\n\n\n\n\n\n\n\nfrom sklearn.svm import SVC\n\nsvm = SVC(kernel='rbf', gamma = 0.01)\nsvm.fit(X_train, y_train)\nsvm.predict(X_test)\n\narray(['Canada', 'Canada', 'Canada', 'Canada', 'Canada', 'Canada',\n       'Canada', 'Canada', 'Canada', 'USA', 'USA', 'Canada', 'Canada',\n       'Canada', 'Canada', 'USA', 'Canada', 'USA', 'Canada', 'Canada',\n       'Canada', 'Canada', 'Canada', 'Canada', 'Canada', 'Canada',\n       'Canada', 'Canada', 'Canada', 'Canada', 'Canada', 'USA', 'Canada',\n       'Canada', 'Canada', 'Canada', 'Canada', 'USA', 'USA', 'Canada',\n       'Canada', 'Canada'], dtype=object)\n\n\n\nsvm.score(X_test, y_test) # accuracy\n\n0.8333333333333334\n\n\n\n## FIXME: visualization: Plot_support_vectors\n\n\n\nRegression\n\n\nprepare X_train, X_test, y_train, y_test\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf = df[['lab1', 'lab2', 'lab3', 'lab4', 'quiz1', 'quiz2']]\n\ny, X = df.pop(\"quiz2\"), df\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\npd.concat([X_train, y_train], axis=1).head()\n\n\n\n\n\n\n\n\n\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n4\n77\n83\n90\n92\n85\n90\n\n\n0\n92\n93\n84\n91\n92\n90\n\n\n2\n78\n85\n83\n80\n80\n82\n\n\n5\n70\n73\n68\n74\n71\n75\n\n\n6\n80\n88\n89\n88\n91\n91\n\n\n\n\n\n\n\n\nfrom sklearn.svm import SVR\n\nsvm = SVR(kernel='rbf', gamma = 0.05)\nsvm.fit(X_train, y_train)\nsvm.predict(X_test)\n\narray([89.39814152, 89.40557499])\n\n\n\nsvm.score(X_test, y_test) # R^2 (it can be -ve, which is worse than DummyRegressor)\n\n-0.12096790646548117"
  },
  {
    "objectID": "0104_svm-rbf.html#hyperparameters",
    "href": "0104_svm-rbf.html#hyperparameters",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\ngamma\n\nControl the complexity\nlarger \\(\\rightarrow\\) more complex\nsmaller \\(\\rightarrow\\) less complex\n\nC\n\nlarger \\(\\rightarrow\\) more complex\nsmaller \\(\\rightarrow\\) less complex\n\nDefault: Features are equally important\n\nWhich hyperparameter controls the weighting of feature?"
  },
  {
    "objectID": "0104_svm-rbf.html#pros",
    "href": "0104_svm-rbf.html#pros",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "Pros",
    "text": "Pros\n\nTime and space complexity are better than \\(k\\)-NN\n\nNo significant difference for small dataset\nBut huge speed and memory difference for large dataset\n\nUsually more accurate than \\(k\\)-NN"
  },
  {
    "objectID": "0104_svm-rbf.html#cons",
    "href": "0104_svm-rbf.html#cons",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "Cons",
    "text": "Cons"
  },
  {
    "objectID": "0104_svm-rbf.html#remarks",
    "href": "0104_svm-rbf.html#remarks",
    "title": "SVM RBF (Support Vector Machine - Radial Basis Function kernel)",
    "section": "Remarks",
    "text": "Remarks\n\nsvm.support_ gives the indices of support vectors\nTo optimize the two hyperparameters gamma and C,\n\nsklearn.model_selection.GridSearchCV\nsklearn.model_selection.RandomizedSearchCV\n\n\n\nCurse of dimensionality\n\nIf there are too many irrelevant features, the models might get confused.\n\nas the accidental similarity swamps out meaning similarity\nMight become random guessing \\(\\rightarrow\\) like dummy classifier\n\n\n\n\n?SVC\n\n?SVC\n\n\nInit signature:\nSVC(\n    *,\n    C=1.0,\n    kernel='rbf',\n    degree=3,\n    gamma='scale',\n    coef0=0.0,\n    shrinking=True,\n    probability=False,\n    tol=0.001,\n    cache_size=200,\n    class_weight=None,\n    verbose=False,\n    max_iter=-1,\n    decision_function_shape='ovr',\n    break_ties=False,\n    random_state=None,\n)\nDocstring:     \nC-Support Vector Classification.\nThe implementation is based on libsvm. The fit time scales at least\nquadratically with the number of samples and may be impractical\nbeyond tens of thousands of samples. For large datasets\nconsider using :class:`~sklearn.svm.LinearSVC` or\n:class:`~sklearn.linear_model.SGDClassifier` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\nThe multiclass support is handled according to a one-vs-one scheme.\nFor details on the precise mathematical formulation of the provided\nkernel functions and how `gamma`, `coef0` and `degree` affect each\nother, see the corresponding section in the narrative documentation:\n:ref:`svm_kernels`.\nRead more in the :ref:`User Guide &lt;svm_classification&gt;`.\nParameters\n----------\nC : float, default=1.0\n    Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive. The penalty\n    is a squared l2 penalty.\nkernel : {'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'\n    Specifies the kernel type to be used in the algorithm. If\n    none is given, 'rbf' will be used. If a callable is given it is used to\n    pre-compute the kernel matrix from data matrices; that matrix should be\n    an array of shape ``(n_samples, n_samples)``. For an intuitive\n    visualization of different kernel types see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`.\ndegree : int, default=3\n    Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels.\ngamma : {'scale', 'auto'} or float, default='scale'\n    Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'.\ncoef0 : float, default=0.0\n    Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'.\nshrinking : bool, default=True\n    Whether to use the shrinking heuristic.\n    See the :ref:`User Guide &lt;shrinking_svm&gt;`.\nprobability : bool, default=False\n    Whether to enable probability estimates. This must be enabled prior\n    to calling `fit`, will slow down that method as it internally uses\n    5-fold cross-validation, and `predict_proba` may be inconsistent with\n    `predict`. Read more in the :ref:`User Guide &lt;scores_probabilities&gt;`.\ntol : float, default=1e-3\n    Tolerance for stopping criterion.\ncache_size : float, default=200\n    Specify the size of the kernel cache (in MB).\nclass_weight : dict or 'balanced', default=None\n    Set the parameter C of class i to class_weight[i]*C for\n    SVC. If not given, all classes are supposed to have\n    weight one.\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\nverbose : bool, default=False\n    Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context.\nmax_iter : int, default=-1\n    Hard limit on iterations within solver, or -1 for no limit.\ndecision_function_shape : {'ovo', 'ovr'}, default='ovr'\n    Whether to return a one-vs-rest ('ovr') decision function of shape\n    (n_samples, n_classes) as all other classifiers, or the original\n    one-vs-one ('ovo') decision function of libsvm which has shape\n    (n_samples, n_classes * (n_classes - 1) / 2). However, note that\n    internally, one-vs-one ('ovo') is always used as a multi-class strategy\n    to train models; an ovr matrix is only constructed from the ovo matrix.\n    The parameter is ignored for binary classification.\n    .. versionchanged:: 0.19\n        decision_function_shape is 'ovr' by default.\n    .. versionadded:: 0.17\n       *decision_function_shape='ovr'* is recommended.\n    .. versionchanged:: 0.17\n       Deprecated *decision_function_shape='ovo' and None*.\nbreak_ties : bool, default=False\n    If true, ``decision_function_shape='ovr'``, and number of classes &gt; 2,\n    :term:`predict` will break ties according to the confidence values of\n    :term:`decision_function`; otherwise the first class among the tied\n    classes is returned. Please note that breaking ties comes at a\n    relatively high computational cost compared to a simple predict.\n    .. versionadded:: 0.22\nrandom_state : int, RandomState instance or None, default=None\n    Controls the pseudo random number generation for shuffling the data for\n    probability estimates. Ignored when `probability` is False.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary &lt;random_state&gt;`.\nAttributes\n----------\nclass_weight_ : ndarray of shape (n_classes,)\n    Multipliers of parameter C for each class.\n    Computed based on the ``class_weight`` parameter.\nclasses_ : ndarray of shape (n_classes,)\n    The classes labels.\ncoef_ : ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)\n    Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n    `coef_` is a readonly property derived from `dual_coef_` and\n    `support_vectors_`.\ndual_coef_ : ndarray of shape (n_classes -1, n_SV)\n    Dual coefficients of the support vector in the decision\n    function (see :ref:`sgd_mathematical_formulation`), multiplied by\n    their targets.\n    For multiclass, coefficient for all 1-vs-1 classifiers.\n    The layout of the coefficients in the multiclass case is somewhat\n    non-trivial. See the :ref:`multi-class section of the User Guide\n    &lt;svm_multi_class&gt;` for details.\nfit_status_ : int\n    0 if correctly fitted, 1 otherwise (will raise warning)\nintercept_ : ndarray of shape (n_classes * (n_classes - 1) / 2,)\n    Constants in decision function.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_iter_ : ndarray of shape (n_classes * (n_classes - 1) // 2,)\n    Number of iterations run by the optimization routine to fit the model.\n    The shape of this attribute depends on the number of models optimized\n    which in turn depends on the number of classes.\n    .. versionadded:: 1.1\nsupport_ : ndarray of shape (n_SV)\n    Indices of support vectors.\nsupport_vectors_ : ndarray of shape (n_SV, n_features)\n    Support vectors. An empty array if kernel is precomputed.\nn_support_ : ndarray of shape (n_classes,), dtype=int32\n    Number of support vectors for each class.\nprobA_ : ndarray of shape (n_classes * (n_classes - 1) / 2)\nprobB_ : ndarray of shape (n_classes * (n_classes - 1) / 2)\n    If `probability=True`, it corresponds to the parameters learned in\n    Platt scaling to produce probability estimates from decision values.\n    If `probability=False`, it's an empty array. Platt scaling uses the\n    logistic function\n    ``1 / (1 + exp(decision_value * probA_ + probB_))``\n    where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n    more information on the multiclass case and training procedure see\n    section 8 of [1]_.\nshape_fit_ : tuple of int of shape (n_dimensions_of_X,)\n    Array dimensions of training vector ``X``.\nSee Also\n--------\nSVR : Support Vector Machine for Regression implemented using libsvm.\nLinearSVC : Scalable Linear Support Vector Machine for classification\n    implemented using liblinear. Check the See Also section of\n    LinearSVC for more comparison element.\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    &lt;http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf&gt;`_\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    &lt;https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393&gt;`_\nExamples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from sklearn.pipeline import make_pipeline\n&gt;&gt;&gt; from sklearn.preprocessing import StandardScaler\n&gt;&gt;&gt; X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n&gt;&gt;&gt; y = np.array([1, 1, 2, 2])\n&gt;&gt;&gt; from sklearn.svm import SVC\n&gt;&gt;&gt; clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\n&gt;&gt;&gt; clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc', SVC(gamma='auto'))])\n&gt;&gt;&gt; print(clf.predict([[-0.8, -1]]))\n[1]\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/svm/_classes.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\n?SVR\n\n?SVR\n\n\nInit signature:\nSVR(\n    *,\n    kernel='rbf',\n    degree=3,\n    gamma='scale',\n    coef0=0.0,\n    tol=0.001,\n    C=1.0,\n    epsilon=0.1,\n    shrinking=True,\n    cache_size=200,\n    verbose=False,\n    max_iter=-1,\n)\nDocstring:     \nEpsilon-Support Vector Regression.\nThe free parameters in the model are C and epsilon.\nThe implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to datasets with more than a couple of 10000 samples. For large\ndatasets consider using :class:`~sklearn.svm.LinearSVR` or\n:class:`~sklearn.linear_model.SGDRegressor` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\nRead more in the :ref:`User Guide &lt;svm_regression&gt;`.\nParameters\n----------\nkernel : {'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'\n     Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix.\ndegree : int, default=3\n    Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels.\ngamma : {'scale', 'auto'} or float, default='scale'\n    Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'.\ncoef0 : float, default=0.0\n    Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'.\ntol : float, default=1e-3\n    Tolerance for stopping criterion.\nC : float, default=1.0\n    Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive.\n    The penalty is a squared l2 penalty.\nepsilon : float, default=0.1\n     Epsilon in the epsilon-SVR model. It specifies the epsilon-tube\n     within which no penalty is associated in the training loss function\n     with points predicted within a distance epsilon from the actual\n     value. Must be non-negative.\nshrinking : bool, default=True\n    Whether to use the shrinking heuristic.\n    See the :ref:`User Guide &lt;shrinking_svm&gt;`.\ncache_size : float, default=200\n    Specify the size of the kernel cache (in MB).\nverbose : bool, default=False\n    Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context.\nmax_iter : int, default=-1\n    Hard limit on iterations within solver, or -1 for no limit.\nAttributes\n----------\nclass_weight_ : ndarray of shape (n_classes,)\n    Multipliers of parameter C for each class.\n    Computed based on the ``class_weight`` parameter.\n    .. deprecated:: 1.2\n        `class_weight_` was deprecated in version 1.2 and will be removed in 1.4.\ncoef_ : ndarray of shape (1, n_features)\n    Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`.\ndual_coef_ : ndarray of shape (1, n_SV)\n    Coefficients of the support vector in the decision function.\nfit_status_ : int\n    0 if correctly fitted, 1 otherwise (will raise warning)\nintercept_ : ndarray of shape (1,)\n    Constants in decision function.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_iter_ : int\n    Number of iterations run by the optimization routine to fit the model.\n    .. versionadded:: 1.1\nn_support_ : ndarray of shape (1,), dtype=int32\n    Number of support vectors.\nshape_fit_ : tuple of int of shape (n_dimensions_of_X,)\n    Array dimensions of training vector ``X``.\nsupport_ : ndarray of shape (n_SV,)\n    Indices of support vectors.\nsupport_vectors_ : ndarray of shape (n_SV, n_features)\n    Support vectors.\nSee Also\n--------\nNuSVR : Support Vector Machine for regression implemented using libsvm\n    using a parameter to control the number of support vectors.\nLinearSVR : Scalable Linear Support Vector Machine for regression\n    implemented using liblinear.\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    &lt;http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf&gt;`_\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    &lt;https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393&gt;`_\nExamples\n--------\n&gt;&gt;&gt; from sklearn.svm import SVR\n&gt;&gt;&gt; from sklearn.pipeline import make_pipeline\n&gt;&gt;&gt; from sklearn.preprocessing import StandardScaler\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; n_samples, n_features = 10, 5\n&gt;&gt;&gt; rng = np.random.RandomState(0)\n&gt;&gt;&gt; y = rng.randn(n_samples)\n&gt;&gt;&gt; X = rng.randn(n_samples, n_features)\n&gt;&gt;&gt; regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\n&gt;&gt;&gt; regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svr', SVR(epsilon=0.2))])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/svm/_classes.py\nType:           ABCMeta\nSubclasses:"
  },
  {
    "objectID": "0103_knn.html",
    "href": "0103_knn.html",
    "title": "k-Nearest Neighbours",
    "section": "",
    "text": "Facial recognition\n\ne.g. feature vectors for human faces\ne.g. identify which face is on their watch list\n\nRecommendation systems"
  },
  {
    "objectID": "0103_knn.html#use-case",
    "href": "0103_knn.html#use-case",
    "title": "k-Nearest Neighbours",
    "section": "",
    "text": "Facial recognition\n\ne.g. feature vectors for human faces\ne.g. identify which face is on their watch list\n\nRecommendation systems"
  },
  {
    "objectID": "0103_knn.html#what-is-it",
    "href": "0103_knn.html#what-is-it",
    "title": "k-Nearest Neighbours",
    "section": "What is it?",
    "text": "What is it?\n\nAnalogy-Based Model\n\ni.e. assigned nearby points the same label\n\nUsing targets \\(y_\\text{train}\\)s from the k-nearest neighbours \\(X_\\text{train}\\)s from \\(X_\\text{new}\\), to predict \\(y_\\text{new}\\)\n\ngather the k-nearest neighbour \\(X\\)s based on euclidean distance (# of features = # of dimensions)\npredict based on voting (for classification) or average/median of \\(y_\\text{train}\\) (for regression)\n\nNon-parametric model\n\ni.e. no parameters associated with the model\nstores O(n) worth of stuff to make prediction\n(in contrast to parametric models that stores only the limited amount of parameters and formulae)\n\nLazy algo: it requires no time to fit"
  },
  {
    "objectID": "0103_knn.html#how",
    "href": "0103_knn.html#how",
    "title": "k-Nearest Neighbours",
    "section": "How?",
    "text": "How?\n\nClassification\n\n\nprepare X_train, X_test, y_train, y_test\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\n\ny, X = df.pop(\"country\"), df\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\npd.concat([X_train, y_train], axis=1).head()\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n160\n-76.4813\n44.2307\nCanada\n\n\n127\n-81.2496\n42.9837\nCanada\n\n\n169\n-66.0580\n45.2788\nCanada\n\n\n188\n-73.2533\n45.3057\nCanada\n\n\n187\n-67.9245\n47.1652\nCanada\n\n\n\n\n\n\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train, y_train)\nknn.predict(X_test)\n\narray(['Canada', 'USA', 'Canada', 'Canada', 'Canada', 'Canada', 'Canada',\n       'Canada', 'USA', 'USA', 'USA', 'Canada', 'Canada', 'Canada',\n       'Canada', 'USA', 'Canada', 'USA', 'Canada', 'Canada', 'Canada',\n       'Canada', 'Canada', 'USA', 'Canada', 'Canada', 'USA', 'Canada',\n       'Canada', 'USA', 'Canada', 'USA', 'Canada', 'Canada', 'Canada',\n       'Canada', 'Canada', 'USA', 'USA', 'Canada', 'Canada', 'Canada'],\n      dtype=object)\n\n\n\nknn.score(X_test, y_test) # accuracy\n\n0.7142857142857143\n\n\n\n## FIXME: visualization\n\n\n\nRegression\n\n\nprepare X_train, X_test, y_train, y_test\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf = df[['lab1', 'lab2', 'lab3', 'lab4', 'quiz1', 'quiz2']]\n\ny, X = df.pop(\"quiz2\"), df\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\npd.concat([X_train, y_train], axis=1).head()\n\n\n\n\n\n\n\n\n\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n4\n77\n83\n90\n92\n85\n90\n\n\n0\n92\n93\n84\n91\n92\n90\n\n\n2\n78\n85\n83\n80\n80\n82\n\n\n5\n70\n73\n68\n74\n71\n75\n\n\n6\n80\n88\n89\n88\n91\n91\n\n\n\n\n\n\n\n\nfrom sklearn.neighbors import KNeighborsRegressor\n\nknn = KNeighborsRegressor(n_neighbors=1)\nknn.fit(X_train, y_train)\nknn.predict(X_test)\n\narray([90., 90.])\n\n\n\nknn.score(X_test, y_test) # R^2 (it can be -ve, which is worse than DummyRegressor)\n\n-0.25"
  },
  {
    "objectID": "0103_knn.html#hyperparameters",
    "href": "0103_knn.html#hyperparameters",
    "title": "k-Nearest Neighbours",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nn_neighbors\n\nlarger \\(\\rightarrow\\) under-fitting\nsmaller (e.g. 1) \\(\\rightarrow\\) over-fitting\nDefault: 5\n\nweights\n\nweighting on features for distance calculation.\nDefault: 'uniform', i.e. equal-weighted"
  },
  {
    "objectID": "0103_knn.html#pros",
    "href": "0103_knn.html#pros",
    "title": "k-Nearest Neighbours",
    "section": "Pros",
    "text": "Pros\n\nEasy to understand and interpret\nSimple hyperparameters for controlling bias-variance tradeoff\nCan learn very complex functions with sufficient amount of data\nLazy learning: Take no time to fit"
  },
  {
    "objectID": "0103_knn.html#cons",
    "href": "0103_knn.html#cons",
    "title": "k-Nearest Neighbours",
    "section": "Cons",
    "text": "Cons\n\nTake long time to make prediction, not useful in real time applications\nNot accurate compared to modern approaches\nNot work well in the following scenarios:\n\nDatasets with many features; or,\nSpare datasets: Values in most features are mostly 0"
  },
  {
    "objectID": "0103_knn.html#remarks",
    "href": "0103_knn.html#remarks",
    "title": "k-Nearest Neighbours",
    "section": "Remarks",
    "text": "Remarks\n\nCurse of dimensionality\n\nIf there are too many irrelevant features, the \\(k\\)-NN models might get confused.\n\nas the accidental similarity swamps out meaning similarity\n\\(k\\)-NN might become random guessing \\(\\rightarrow\\) like dummy classifier\n\n\n\n\n?KNeighborsClassifier\n\n?KNeighborsClassifier\n\n\nInit signature:\nKNeighborsClassifier(\n    n_neighbors=5,\n    *,\n    weights='uniform',\n    algorithm='auto',\n    leaf_size=30,\n    p=2,\n    metric='minkowski',\n    metric_params=None,\n    n_jobs=None,\n)\nDocstring:     \nClassifier implementing the k-nearest neighbors vote.\nRead more in the :ref:`User Guide &lt;classification&gt;`.\nParameters\n----------\nn_neighbors : int, default=5\n    Number of neighbors to use by default for :meth:`kneighbors` queries.\nweights : {'uniform', 'distance'}, callable or None, default='uniform'\n    Weight function used in prediction.  Possible values:\n    - 'uniform' : uniform weights.  All points in each neighborhood\n      are weighted equally.\n    - 'distance' : weight points by the inverse of their distance.\n      in this case, closer neighbors of a query point will have a\n      greater influence than neighbors which are further away.\n    - [callable] : a user-defined function which accepts an\n      array of distances, and returns an array of the same shape\n      containing the weights.\n    Refer to the example entitled\n    :ref:`sphx_glr_auto_examples_neighbors_plot_classification.py`\n    showing the impact of the `weights` parameter on the decision\n    boundary.\nalgorithm : {'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'\n    Algorithm used to compute the nearest neighbors:\n    - 'ball_tree' will use :class:`BallTree`\n    - 'kd_tree' will use :class:`KDTree`\n    - 'brute' will use a brute-force search.\n    - 'auto' will attempt to decide the most appropriate algorithm\n      based on the values passed to :meth:`fit` method.\n    Note: fitting on sparse input will override the setting of\n    this parameter, using brute force.\nleaf_size : int, default=30\n    Leaf size passed to BallTree or KDTree.  This can affect the\n    speed of the construction and query, as well as the memory\n    required to store the tree.  The optimal value depends on the\n    nature of the problem.\np : float, default=2\n    Power parameter for the Minkowski metric. When p = 1, this is\n    equivalent to using manhattan_distance (l1), and euclidean_distance\n    (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\nmetric : str or callable, default='minkowski'\n    Metric to use for distance computation. Default is \"minkowski\", which\n    results in the standard Euclidean distance when p = 2. See the\n    documentation of `scipy.spatial.distance\n    &lt;https://docs.scipy.org/doc/scipy/reference/spatial.distance.html&gt;`_ and\n    the metrics listed in\n    :class:`~sklearn.metrics.pairwise.distance_metrics` for valid metric\n    values.\n    If metric is \"precomputed\", X is assumed to be a distance matrix and\n    must be square during fit. X may be a :term:`sparse graph`, in which\n    case only \"nonzero\" elements may be considered neighbors.\n    If metric is a callable function, it takes two arrays representing 1D\n    vectors as inputs and must return one value indicating the distance\n    between those vectors. This works for Scipy's metrics, but is less\n    efficient than passing the metric name as a string.\nmetric_params : dict, default=None\n    Additional keyword arguments for the metric function.\nn_jobs : int, default=None\n    The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary &lt;n_jobs&gt;`\n    for more details.\n    Doesn't affect :meth:`fit` method.\nAttributes\n----------\nclasses_ : array of shape (n_classes,)\n    Class labels known to the classifier\neffective_metric_ : str or callble\n    The distance metric used. It will be same as the `metric` parameter\n    or a synonym of it, e.g. 'euclidean' if the `metric` parameter set to\n    'minkowski' and `p` parameter set to 2.\neffective_metric_params_ : dict\n    Additional keyword arguments for the metric function. For most metrics\n    will be same with `metric_params` parameter, but may also contain the\n    `p` parameter value if the `effective_metric_` attribute is set to\n    'minkowski'.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_samples_fit_ : int\n    Number of samples in the fitted data.\noutputs_2d_ : bool\n    False when `y`'s shape is (n_samples, ) or (n_samples, 1) during fit\n    otherwise True.\nSee Also\n--------\nRadiusNeighborsClassifier: Classifier based on neighbors within a fixed radius.\nKNeighborsRegressor: Regression based on k-nearest neighbors.\nRadiusNeighborsRegressor: Regression based on neighbors within a fixed radius.\nNearestNeighbors: Unsupervised learner for implementing neighbor searches.\nNotes\n-----\nSee :ref:`Nearest Neighbors &lt;neighbors&gt;` in the online documentation\nfor a discussion of the choice of ``algorithm`` and ``leaf_size``.\n.. warning::\n   Regarding the Nearest Neighbors algorithms, if it is found that two\n   neighbors, neighbor `k+1` and `k`, have identical distances\n   but different labels, the results will depend on the ordering of the\n   training data.\nhttps://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm\nExamples\n--------\n&gt;&gt;&gt; X = [[0], [1], [2], [3]]\n&gt;&gt;&gt; y = [0, 0, 1, 1]\n&gt;&gt;&gt; from sklearn.neighbors import KNeighborsClassifier\n&gt;&gt;&gt; neigh = KNeighborsClassifier(n_neighbors=3)\n&gt;&gt;&gt; neigh.fit(X, y)\nKNeighborsClassifier(...)\n&gt;&gt;&gt; print(neigh.predict([[1.1]]))\n[0]\n&gt;&gt;&gt; print(neigh.predict_proba([[0.9]]))\n[[0.666... 0.333...]]\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/neighbors/_classification.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\n?KNeighborsRegressor\n\n?KNeighborsRegressor\n\n\nInit signature:\nKNeighborsRegressor(\n    n_neighbors=5,\n    *,\n    weights='uniform',\n    algorithm='auto',\n    leaf_size=30,\n    p=2,\n    metric='minkowski',\n    metric_params=None,\n    n_jobs=None,\n)\nDocstring:     \nRegression based on k-nearest neighbors.\nThe target is predicted by local interpolation of the targets\nassociated of the nearest neighbors in the training set.\nRead more in the :ref:`User Guide &lt;regression&gt;`.\n.. versionadded:: 0.9\nParameters\n----------\nn_neighbors : int, default=5\n    Number of neighbors to use by default for :meth:`kneighbors` queries.\nweights : {'uniform', 'distance'}, callable or None, default='uniform'\n    Weight function used in prediction.  Possible values:\n    - 'uniform' : uniform weights.  All points in each neighborhood\n      are weighted equally.\n    - 'distance' : weight points by the inverse of their distance.\n      in this case, closer neighbors of a query point will have a\n      greater influence than neighbors which are further away.\n    - [callable] : a user-defined function which accepts an\n      array of distances, and returns an array of the same shape\n      containing the weights.\n    Uniform weights are used by default.\nalgorithm : {'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'\n    Algorithm used to compute the nearest neighbors:\n    - 'ball_tree' will use :class:`BallTree`\n    - 'kd_tree' will use :class:`KDTree`\n    - 'brute' will use a brute-force search.\n    - 'auto' will attempt to decide the most appropriate algorithm\n      based on the values passed to :meth:`fit` method.\n    Note: fitting on sparse input will override the setting of\n    this parameter, using brute force.\nleaf_size : int, default=30\n    Leaf size passed to BallTree or KDTree.  This can affect the\n    speed of the construction and query, as well as the memory\n    required to store the tree.  The optimal value depends on the\n    nature of the problem.\np : float, default=2\n    Power parameter for the Minkowski metric. When p = 1, this is\n    equivalent to using manhattan_distance (l1), and euclidean_distance\n    (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.\nmetric : str or callable, default='minkowski'\n    Metric to use for distance computation. Default is \"minkowski\", which\n    results in the standard Euclidean distance when p = 2. See the\n    documentation of `scipy.spatial.distance\n    &lt;https://docs.scipy.org/doc/scipy/reference/spatial.distance.html&gt;`_ and\n    the metrics listed in\n    :class:`~sklearn.metrics.pairwise.distance_metrics` for valid metric\n    values.\n    If metric is \"precomputed\", X is assumed to be a distance matrix and\n    must be square during fit. X may be a :term:`sparse graph`, in which\n    case only \"nonzero\" elements may be considered neighbors.\n    If metric is a callable function, it takes two arrays representing 1D\n    vectors as inputs and must return one value indicating the distance\n    between those vectors. This works for Scipy's metrics, but is less\n    efficient than passing the metric name as a string.\nmetric_params : dict, default=None\n    Additional keyword arguments for the metric function.\nn_jobs : int, default=None\n    The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary &lt;n_jobs&gt;`\n    for more details.\n    Doesn't affect :meth:`fit` method.\nAttributes\n----------\neffective_metric_ : str or callable\n    The distance metric to use. It will be same as the `metric` parameter\n    or a synonym of it, e.g. 'euclidean' if the `metric` parameter set to\n    'minkowski' and `p` parameter set to 2.\neffective_metric_params_ : dict\n    Additional keyword arguments for the metric function. For most metrics\n    will be same with `metric_params` parameter, but may also contain the\n    `p` parameter value if the `effective_metric_` attribute is set to\n    'minkowski'.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_samples_fit_ : int\n    Number of samples in the fitted data.\nSee Also\n--------\nNearestNeighbors : Unsupervised learner for implementing neighbor searches.\nRadiusNeighborsRegressor : Regression based on neighbors within a fixed radius.\nKNeighborsClassifier : Classifier implementing the k-nearest neighbors vote.\nRadiusNeighborsClassifier : Classifier implementing\n    a vote among neighbors within a given radius.\nNotes\n-----\nSee :ref:`Nearest Neighbors &lt;neighbors&gt;` in the online documentation\nfor a discussion of the choice of ``algorithm`` and ``leaf_size``.\n.. warning::\n   Regarding the Nearest Neighbors algorithms, if it is found that two\n   neighbors, neighbor `k+1` and `k`, have identical distances but\n   different labels, the results will depend on the ordering of the\n   training data.\nhttps://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\nExamples\n--------\n&gt;&gt;&gt; X = [[0], [1], [2], [3]]\n&gt;&gt;&gt; y = [0, 0, 1, 1]\n&gt;&gt;&gt; from sklearn.neighbors import KNeighborsRegressor\n&gt;&gt;&gt; neigh = KNeighborsRegressor(n_neighbors=2)\n&gt;&gt;&gt; neigh.fit(X, y)\nKNeighborsRegressor(...)\n&gt;&gt;&gt; print(neigh.predict([[1.5]]))\n[0.5]\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/neighbors/_regression.py\nType:           ABCMeta\nSubclasses:"
  },
  {
    "objectID": "04_data-preprocessing.html",
    "href": "04_data-preprocessing.html",
    "title": "Data Preprocessing",
    "section": "",
    "text": "Models are not able to deal with missing values (NaNs)\n\nSee below for example\n\nPossible solutions\n\nDelete the rows\n\nCons: not good if dataset is small\n\nImputation\n\nfor Categories: fill by “missing” or mode of training data\nfor Numerics: fill by mean or median of training data\n\n\n\n\n# FIXME\n# X_train.info() to visualize the problem\n\n\n# knn = kNeighborsRegressor()\n# knn.fit(X_train, y_train)\n# ValueError:...\n\n\n\n\n\n\nprepare df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\ndf\n\n# FIXME\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n0\n-130.0437\n55.9773\nUSA\n\n\n1\n-134.4197\n58.3019\nUSA\n\n\n2\n-123.0780\n48.9854\nUSA\n\n\n3\n-122.7436\n48.9881\nUSA\n\n\n4\n-122.2691\n48.9951\nUSA\n\n\n...\n...\n...\n...\n\n\n204\n-72.7218\n45.3990\nCanada\n\n\n205\n-66.6458\n45.9664\nCanada\n\n\n206\n-79.2506\n42.9931\nCanada\n\n\n207\n-72.9406\n45.6275\nCanada\n\n\n208\n-79.4608\n46.3092\nCanada\n\n\n\n\n209 rows × 3 columns\n\n\n\n\nfrom sklearn.preprocessing import SimpleImputer\n\nimputer = SimpleImputer(strategy=\"median\")\nimputer.fit(X_train)\n\nX_train_imp = imputer.transform(X_train)\nX_test_imp = imputer.transform(X_test) \n\n# FIXME: visualize"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose",
    "href": "04_data-preprocessing.html#purpose",
    "title": "Data Preprocessing",
    "section": "Purpose",
    "text": "Purpose\n\nTo allow preprocessing + cross-validation\nTo avoid training info leaking into cross-validation set (via the X_train_scaled)"
  },
  {
    "objectID": "04_data-preprocessing.html#how",
    "href": "04_data-preprocessing.html#how",
    "title": "Data Preprocessing",
    "section": "",
    "text": "prepare df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\ndf\n\n# FIXME\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n0\n-130.0437\n55.9773\nUSA\n\n\n1\n-134.4197\n58.3019\nUSA\n\n\n2\n-123.0780\n48.9854\nUSA\n\n\n3\n-122.7436\n48.9881\nUSA\n\n\n4\n-122.2691\n48.9951\nUSA\n\n\n...\n...\n...\n...\n\n\n204\n-72.7218\n45.3990\nCanada\n\n\n205\n-66.6458\n45.9664\nCanada\n\n\n206\n-79.2506\n42.9931\nCanada\n\n\n207\n-72.9406\n45.6275\nCanada\n\n\n208\n-79.4608\n46.3092\nCanada\n\n\n\n\n209 rows × 3 columns\n\n\n\n\nfrom sklearn.preprocessing import SimpleImputer\n\nimputer = SimpleImputer(strategy=\"median\")\nimputer.fit(X_train)\n\nX_train_imp = imputer.transform(X_train)\nX_test_imp = imputer.transform(X_test) \n\n# FIXME: visualize"
  },
  {
    "objectID": "04_data-preprocessing.html#remarks",
    "href": "04_data-preprocessing.html#remarks",
    "title": "Data Preprocessing",
    "section": "Remarks",
    "text": "Remarks\n\nWe use test error to approximate generalization error (or deployment error)\nIf the test error is “reasonable”, we will deploy the model\nWe typically expect \\(E_{\\text{train}} &lt; E_{\\text{validation}} &lt; E_{\\text{test}} &lt; E_{\\text{deployment}} &lt; E_{\\text{best}}\\).\n\n\nWhat is underfitting?\n\nThe model is too simple\nBoth train and validation error are similarly high\n\\(E_{\\text{best}} &lt; E_{\\text{train}} \\lesssim E_{\\text{validation}}\\)\n\n\n\nWhat is overfitting?\n\nThe model is too complicated, and specified to training data only\nTraining error is too low, and a big gap exists between training and validation error\n\\(E_{\\text{train}} &lt; E_{\\text{best}} &lt; E_{\\text{validation}}\\)\n\n\n\nWhat is Bias vs. Variance tradeoff?\n\nA fundamental tradeoff in supervised learning\n\nComplexity \\(\\uparrow\\) \\(\\Rightarrow\\) \\(E_\\text{train} \\downarrow\\) but \\((E_\\text{validation} - E_\\text{train}) \\uparrow\\)\n\nBias \\(\\Leftrightarrow\\) Underfitting: the tendency to consistently learn the same wrong thing\nVariance \\(\\Leftrightarrow\\) Overfitting: the tendency to learn random things irrespective of real signals\n\n source\n\n\nGolden rule: The test data cannot influence the training phase in any way\n\nTo avoid breaking it, we always keep our testing set in an imaginary vault when we’re splitting data"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-1",
    "href": "04_data-preprocessing.html#purpose-1",
    "title": "Data Preprocessing",
    "section": "Purpose",
    "text": "Purpose\n\nIn general, we want to apply different preprocessing/transformations on different features\n\nFor numeric features: Imputation + Scaling\nFor categorical features: Imputation + One-hot encoding"
  },
  {
    "objectID": "04_data-preprocessing.html#how-1",
    "href": "04_data-preprocessing.html#how-1",
    "title": "Data Preprocessing",
    "section": "How?",
    "text": "How?\n\n# FIXME: load data\n\n\nStandardization\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# FIXME: (to visualize the result) pd.DataFrame(X_train_scaled, columns=X_train.columns)\n\n\n\nNormalization\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# FIXME: (to visualize the result) pd.DataFrame(X_train_scaled, columns=X_train.columns)"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-2",
    "href": "04_data-preprocessing.html#purpose-2",
    "title": "Data Preprocessing",
    "section": "Purpose",
    "text": "Purpose\n\nIn scikit-learn, most algorithms require numeric inputs\n\ne.g. for \\(k\\)-NN, unable to calculate distances\nsklearn.DecisionTree does not support categorical features\n\nalthough theoretically it should work\nsee below for exmample (FIXME: ValueError: Cannot use median strategy with non-numerica data…)\n\n\nPossible solutions\n\nDrop the column(s) (not recommended)\n\nthose columns might be relevant to the target\n\nTransform categorical features to numerics. Two ways:\n\nOrdinal encoding\nOne-hot encoding (OHE) \\(\\leftarrow\\) recommended in most cases\n\nCreate binary columns for each category in the feature"
  },
  {
    "objectID": "04_data-preprocessing.html#how-2",
    "href": "04_data-preprocessing.html#how-2",
    "title": "Data Preprocessing",
    "section": "How?",
    "text": "How?\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ndf_train, df_validation = train_test_split(\n    df_train, test_size=0.25, random_state=123\n)\n\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_validation, X_validation = df_validation.pop(\"country\"), df_validation\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    clf.fit(X_train, y_train)\n\n    #print(f\"Train accuracy (max_depth={depth}): {round(clf.score(X_train, y_train), 3)}\")\n    print(f\"Validation accuracy (max_depth={depth}): {round(clf.score(X_validation, y_validation), 3)}\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error\n\nValidation accuracy (max_depth=1): 0.81\nValidation accuracy (max_depth=2): 0.81\nValidation accuracy (max_depth=3): 0.833\nValidation accuracy (max_depth=4): 0.833\nValidation accuracy (max_depth=5): 0.905\nValidation accuracy (max_depth=6): 0.881\nTest accuracy: 0.762\n\n\nWe typically expect \\(E_{train} &lt; E_{validation} &lt; E_{test} &lt; E_{deployment}\\).\n\nPros\n\nAble to reduce and approximate generalization error\nMuch better than Train-test split, in which we have only examined the training accuracy before looking at testing.\n\n\n\nCons\n\nIf the data set is small, then the validation set will be tiny and will not be a good representative of testing set.\n\n\n\nCross-validation\n\nSplit the training data into k-fold\nEach “fold” takes turn to be a validation set\nValidation score statistics = mean/variance of each cross-validation score (scores across folds) \n\n\ntraining and validation\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# train model and score\nclf = DecisionTreeClassifier(max_depth=4)\n\nscores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\npd.DataFrame(scores)\n\n\n\n\n\n\n\n\nfit_time\nscore_time\ntest_score\ntrain_score\n\n\n\n\n0\n0.002524\n0.002084\n0.764706\n0.913333\n\n\n1\n0.002855\n0.002135\n0.823529\n0.906667\n\n\n2\n0.001225\n0.000673\n0.705882\n0.906667\n\n\n3\n0.001533\n0.000713\n0.941176\n0.900000\n\n\n4\n0.000889\n0.000631\n0.823529\n0.906667\n\n\n5\n0.000849\n0.000594\n0.823529\n0.913333\n\n\n6\n0.001619\n0.000639\n0.705882\n0.920000\n\n\n7\n0.001016\n0.000566\n0.937500\n0.900662\n\n\n8\n0.000744\n0.000459\n0.937500\n0.900662\n\n\n9\n0.000704\n0.000463\n0.937500\n0.900662\n\n\n\n\n\n\n\n\nprint(f\"Average cv scores: {round(scores['test_score'].mean(), 2)}\")\nprint(f\"SD of cv scores: {round(scores['test_score'].var()**0.5, 2)}\")\n\nAverage cv scores: 0.84\nSD of cv scores: 0.09\n\n\n\n\ntraining, validation and testing\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    \n    scores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\n\n    print(f\"Average cv scores (max_depth={depth}): {round(scores['test_score'].mean(), 3)}\")\n    print(f\"SD of cv scores (max_depth={depth}): {round(scores['test_score'].var()**0.5, 3)}\\n\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error, comparable to cv error\n\nAverage cv scores (max_depth=1): 0.81\nSD of cv scores (max_depth=1): 0.085\n\nAverage cv scores (max_depth=2): 0.804\nSD of cv scores (max_depth=2): 0.086\n\nAverage cv scores (max_depth=3): 0.804\nSD of cv scores (max_depth=3): 0.09\n\nAverage cv scores (max_depth=4): 0.84\nSD of cv scores (max_depth=4): 0.09\n\nAverage cv scores (max_depth=5): 0.846\nSD of cv scores (max_depth=5): 0.083\n\nAverage cv scores (max_depth=6): 0.815\nSD of cv scores (max_depth=6): 0.061\n\nTest accuracy: 0.833\n\n\n\n\nPros\n\nMore powerful, also applied to small data set!\nAble to examine the variation in the scores across folds\nGive a more robust estimate of error on unseen data"
  },
  {
    "objectID": "04_data-preprocessing.html#ordinal-encoding",
    "href": "04_data-preprocessing.html#ordinal-encoding",
    "title": "Data Preprocessing",
    "section": "Ordinal encoding",
    "text": "Ordinal encoding\n\nHow?\n\n# FIXME: load data\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\n\nencode = OrdinalEncoder()\nencode.fit(X_train)\nX_train_ord = encode.transform(X_train) # use one feature X_train as example\nX_test_ord = encode.transform(X_test)\n\nValidation accuracy (max_depth=1): 0.81\nValidation accuracy (max_depth=2): 0.81\nValidation accuracy (max_depth=3): 0.833\nValidation accuracy (max_depth=4): 0.833\nValidation accuracy (max_depth=5): 0.905\nValidation accuracy (max_depth=6): 0.881\nTest accuracy: 0.762\n\n\nWe typically expect \\(E_{train} &lt; E_{validation} &lt; E_{test} &lt; E_{deployment}\\).\n\n\nCons\n\nMight have imposed unrealistic ordinality in the data\n\ni.e. not necessarily making sense on distancing\nIn the example below, French and Hindi is closer than French and Spanish\n\n\n\ndf = pd.DataFrame(X_train_ord, …)\npd.concat([X_train, df], axis=1)"
  },
  {
    "objectID": "04_data-preprocessing.html#one-hot-encoding-ohe",
    "href": "04_data-preprocessing.html#one-hot-encoding-ohe",
    "title": "Data Preprocessing",
    "section": "One-hot encoding (OHE)",
    "text": "One-hot encoding (OHE)\n\nHow?\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nencode = OneHotEncoder(handle_unknown=”ignore”, sparse=False, dtype=”int”)\nencode.fit(X_train)\n\nX_train_ord = encode.transform(X_train) # use one feature X_train as example\nencode.categories_"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-3",
    "href": "04_data-preprocessing.html#purpose-3",
    "title": "Data Preprocessing",
    "section": "Purpose",
    "text": "Purpose\n\nTo allow preprocessing + cross-validation\nTo avoid training info leaking into cross-validation set (via the X_train_scaled)"
  },
  {
    "objectID": "04_data-preprocessing.html#how-4",
    "href": "04_data-preprocessing.html#how-4",
    "title": "Data Preprocessing",
    "section": "How?",
    "text": "How?\n\nFIXME: Picture for visualization\n\n\noptional\n# option 1\nfrom sklearn.pipeline import Pipeline\n\npip = Pipeline(\n    steps = [\n        (\"imputer\", SimpleImputer(strategy=\"median\")), # ← the earlier steps should be transformers\n        (\"scaler\", StandardScaler()),\n        (\"regressor\", kNeighborsRegressor()),          # ← the last step has to be model\n    ]\n)\n\n\nNameError: name 'SimpleImputer' is not defined\n\n\n\n# option 2: Shorthand\nfrom sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(\n    SimpleImputer(strategy=\"median\"), \n    StandardScaler(), \n    kNeighborsRegressor()\n)\n\npipe\n# The names are automatically defined from the lower case of the functions\n# e.g. SimpleImputer → \"simpleimputer\"\n\n\n# Training only\npipe.fit(X_train, y_train)\npipe.predict(X_train)\n\n# Cross-validation\ncross_validate(pipe, X_train, y_train, return_train_score=True)"
  },
  {
    "objectID": "04_data-preprocessing.html#cons-1",
    "href": "04_data-preprocessing.html#cons-1",
    "title": "Data Preprocessing",
    "section": "Cons",
    "text": "Cons\n\nAll features are forced to go through the same transformations\n\nWe want to apply OHE on categorical features, but NOT numeric features\nWe want to apply scaling on numeric features, but NOT categorical features"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-4",
    "href": "04_data-preprocessing.html#purpose-4",
    "title": "Data Preprocessing",
    "section": "Purpose",
    "text": "Purpose\n\nIn general, we want to apply different preprocessing/transformations on different features\n\nFor numeric features: Imputation + Scaling\nFor categorical features: Imputation + One-hot encoding"
  },
  {
    "objectID": "04_data-preprocessing.html#how-5",
    "href": "04_data-preprocessing.html#how-5",
    "title": "Data Preprocessing",
    "section": "How?",
    "text": "How?\n\nFIXME: Picture for visualization\n\n\n1) identifying feature type in the dataset, for example,\n\nnumeric_feats = [&lt;colname&gt;, …]\ncategorical_feats = [&lt;colname&gt;, …]\npassthrough_feats = [&lt;colname&gt;, …]\ndrop_feats  = [&lt;colname&gt;, …] # for simpsity and demostration\n\n\n\n2) apply on appropriate columns\n\n\noptional\n# option 1\nfrom sklearn.compose import ColumnTransformer\n\nct = ColumnTransformer(\n  [\n    (“scaling”, StandardScaler(), numeric_feats),\n    (“onehot”, OneHotEncoder(sparse=False), categorical_feats)\n  ]\n)\n\n\n\n# option 2: Shorthand\nfrom sklearn.compose import make_column_transformer\n\nct = make_column_transformer(\n  (StandardScaler(), numeric_feats),\n  (OneHotEncoder(sparse=False), categorical_feats)\n  (“passthrough”, passthrough_feats),\n  (“drop”, drop_feats), ← the columns will be dropped even if we don’t have this line\n)\nct\n\n\nX_train_tran_array = ct.fit_transform(X_train) # return a np.ndarray\n\ncolumn_names = (\n  numeric_feats\n  + ct.named_transformers_[“onehotencoder”].get_feature_names().tolist()\n  + passthrough_feats\n)\nprint(column_names)\n\n\nX_train_tran = pd.DataFrame(X_train_tran_array, columns=column_names)\nX_train_tran\n\n\nfrom sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(ct, SVC())\npipe.fit(X_train, y_train)\npipe.predict(X_test)"
  },
  {
    "objectID": "04_data-preprocessing.html#pros",
    "href": "04_data-preprocessing.html#pros",
    "title": "Data Preprocessing",
    "section": "Pros",
    "text": "Pros\n\nBuild all our transformations together into one object\n\ne.g. we would not forget to apply certain transformation in the test data"
  },
  {
    "objectID": "04_data-preprocessing.html#cons-2",
    "href": "04_data-preprocessing.html#cons-2",
    "title": "Data Preprocessing",
    "section": "Cons:",
    "text": "Cons:\n\nProblem with cross_validate?"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-tackling-missing-values",
    "href": "04_data-preprocessing.html#purpose-tackling-missing-values",
    "title": "Data Preprocessing",
    "section": "",
    "text": "Models are not able to deal with missing values (NaNs)\n\nSee below for example\n\nPossible solutions\n\nDelete the rows\n\nCons: not good if dataset is small\n\nImputation\n\nfor Categories: fill by “missing” or mode of training data\nfor Numerics: fill by mean or median of training data\n\n\n\n\n# FIXME\n# X_train.info() to visualize the problem\n\n\n# knn = kNeighborsRegressor()\n# knn.fit(X_train, y_train)\n# ValueError:..."
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-for-numeric-features",
    "href": "04_data-preprocessing.html#purpose-for-numeric-features",
    "title": "Data Preprocessing",
    "section": "Purpose: for numeric features",
    "text": "Purpose: for numeric features\n\nFeatures with different scaling is a huge problem for \\(k\\)-NN and SVM\n\nDistance is dominated by the features with larger values\nFeatures with smaller values are being ignored, but they can be highly informative!\nFIXME: Example?\nThough not a problem for DecisionTree and Dummy\n\nDecisionTree looks at features one-by-one\nDummy only looks at the target Y\n\n\nOur models should not be sensitive to scales\nPossible solutions\n\nNormalization: set range to [0, 1]\n\n(value - min) / max\n\nStandardization: standard the values s.t. sample (mean, sd) = (0, 1)\n\n(value - sample_mean) / sd\n\nFIXME: Other two"
  },
  {
    "objectID": "04_data-preprocessing.html#purpose-tackling-categorical-variables",
    "href": "04_data-preprocessing.html#purpose-tackling-categorical-variables",
    "title": "Data Preprocessing",
    "section": "Purpose: tackling categorical variables",
    "text": "Purpose: tackling categorical variables\n\nIn scikit-learn, most algorithms require numeric inputs\n\ne.g. for \\(k\\)-NN, unable to calculate distances\nsklearn.DecisionTree does not support categorical features\n\nalthough theoretically it should work\nsee below for exmample (FIXME: ValueError: Cannot use median strategy with non-numerica data…)\n\n\nPossible solutions\n\nDrop the column(s) (not recommended)\n\nthose columns might be relevant to the target\n\nTransform categorical features to numerics. Two ways:\n\nOrdinal encoding\nOne-hot encoding (OHE) \\(\\leftarrow\\) recommended in most cases\n\nCreate binary columns for each category in the feature"
  }
]
[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "01_dummy.html",
    "href": "01_dummy.html",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#use-case",
    "href": "01_dummy.html#use-case",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#what-is-it",
    "href": "01_dummy.html#what-is-it",
    "title": "Dummy Classifier/Regressor",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: use the mode of y_train to predict y_test\nFor regression: use the mean / median / constant value of y_train to predict y_test"
  },
  {
    "objectID": "01_dummy.html#how",
    "href": "01_dummy.html#how",
    "title": "Dummy Classifier/Regressor",
    "section": "How?",
    "text": "How?\n\nClassification\n\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyClassifier\n\nclf = DummyClassifier(strategy=\"most_frequent\")\nclf.fit(X, y)\nclf.predict(X)\n\narray(['not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+'], dtype='&lt;U6')\n\n\n\nclf.score(X, y) # accuracy\n\n0.5238095238095238\n\n\n\n\nRegression\n\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyRegressor\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2\n\n0.0"
  },
  {
    "objectID": "01_dummy.html#hyperparameters",
    "href": "01_dummy.html#hyperparameters",
    "title": "Dummy Classifier/Regressor",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nstrategy\n\n(DummyClassifier) {“most_frequent”, “prior”, “stratified”, “uniform”, “constant”}. Default: “prior”\n(DummyRegressor) {“mean”, “median”, “quantile”, “constant”}. Default: “mean”\n\nconstant\n\nspecified if strategy = \"constant\"\nfor DummyClassifier, the constant must exist in the y"
  },
  {
    "objectID": "02_decision-tree.html",
    "href": "02_decision-tree.html",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#use-case",
    "href": "02_decision-tree.html#use-case",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#what-is-it",
    "href": "02_decision-tree.html#what-is-it",
    "title": "Decision Tree",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: ???\n\nAt each node, the algorithm learns/decides\n\nwhich feature is the most useful for classification at that point\nwhat threshold to use\nobjective: to reduce impurity at each node\n\n\nFor regression: ???"
  },
  {
    "objectID": "02_decision-tree.html#how",
    "href": "02_decision-tree.html#how",
    "title": "Decision Tree",
    "section": "How?",
    "text": "How?\n\n\nDefine display_tree\n# Reference: DSCI_571_sup-learn-1_students/lectures/code/utils.py\nimport re \nimport graphviz\n\nfrom sklearn.tree import export_graphviz\n\ndef display_tree(feature_names, tree, counts=False):\n    \"\"\" For binary classification only \"\"\"\n    dot = export_graphviz(\n        tree,\n        out_file=None,\n        feature_names=feature_names,\n        class_names=tree.classes_.astype(str),\n        impurity=False,\n    )    \n    # adapted from https://stackoverflow.com/questions/44821349/python-graphviz-remove-legend-on-nodes-of-decisiontreeclassifier\n    # dot = re.sub('(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])(\\\\\\\\nclass = [A-Za-z0-9]+)', '', dot)\n    if counts: \n        dot = re.sub(\"(samples = [0-9]+)\\\\\\\\n\", \"\", dot)\n        dot = re.sub(\"value\", \"counts\", dot)\n    else:\n        dot = re.sub(\"(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\", \"\", dot)\n        dot = re.sub(\"(samples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\\\\\\\\n\", \"\", dot)\n\n    return graphviz.Source(dot)\n\n\n\nClassification\n\n\nPrepare data\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\n\nCode\n# import numpy as np\n# X_binary = X.copy()\n# X_binary.loc[:,\"lab1\":\"quiz1\"] = X_binary.loc[:,\"lab1\":\"quiz1\"].apply(lambda x: np.where(x &gt;= 90, 1, 0))\n\n# from sklearn.tree import DecisionTreeClassifier\n# clf = DecisionTreeClassifier()\n# clf.fit(X_binary, y)\n# clf.predict(X_binary)\n\n# clf.score(X_binary, y) # accuracy\n\n# display_tree(X_binary.columns, clf)\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\nclf.predict(X)\n\narray(['A+', 'not A+', 'not A+', 'A+', 'A+', 'not A+', 'A+', 'not A+',\n       'not A+', 'not A+', 'A+', 'A+', 'A+', 'A+', 'not A+', 'not A+',\n       'A+', 'not A+', 'not A+', 'not A+', 'A+'], dtype=object)\n\n\n\nclf.score(X, y) # accuracy\n\n1.0\n\n\n\ndisplay_tree(X.columns, clf)\n\n\n\n\n\n\nRegression\n\n\nPrepare data\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2\n\n0.0"
  },
  {
    "objectID": "02_decision-tree.html#hyperparameters",
    "href": "02_decision-tree.html#hyperparameters",
    "title": "Decision Tree",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\ncriterion - impurity\n\n(DecisionTreeClassifier) Default: “gini”\n\n“gini”: gini index\n“entropy”: cross entropy\n“log_loss”: information gain\n\n(DecisionTreeRegressor) Default: “squared_error”\n\n{“squared_error”, “friedman_mse”, “absolute_error”, “poisson”}"
  },
  {
    "objectID": "02_decision-tree.html#pros",
    "href": "02_decision-tree.html#pros",
    "title": "Decision Tree",
    "section": "Pros",
    "text": "Pros"
  },
  {
    "objectID": "02_decision-tree.html#cons",
    "href": "02_decision-tree.html#cons",
    "title": "Decision Tree",
    "section": "Cons",
    "text": "Cons"
  },
  {
    "objectID": "02_decision-tree.html#remarks",
    "href": "02_decision-tree.html#remarks",
    "title": "Decision Tree",
    "section": "Remarks",
    "text": "Remarks\n\n?DecisionTreeClassifier\n\n\nInit signature:\nDecisionTreeClassifier(\n    *,\n    criterion='gini',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    class_weight=None,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree classifier.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n    The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nclass_weight : dict, list of dict or \"balanced\", default=None\n    Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n    For multi-output, the weights of each column of y will be multiplied.\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nclasses_ : ndarray of shape (n_classes,) or list of ndarray\n    The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem).\nfeature_importances_ : ndarray of shape (n_features,)\n    The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_classes_ : int or list of int\n    The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems).\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeRegressor : A decision tree regressor.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_iris\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeClassifier\n&gt;&gt;&gt; clf = DecisionTreeClassifier(random_state=0)\n&gt;&gt;&gt; iris = load_iris()\n&gt;&gt;&gt; cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeClassifier\n\n\n\n\n?DecisionTreeRegressor\n\n\nInit signature:\nDecisionTreeRegressor(\n    *,\n    criterion='squared_error',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree regressor.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"\n    The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n    .. versionadded:: 0.24\n        Poisson deviance criterion.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nfeature_importances_ : ndarray of shape (n_features,)\n    The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeClassifier : A decision tree classifier.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_diabetes\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeRegressor\n&gt;&gt;&gt; X, y = load_diabetes(return_X_y=True)\n&gt;&gt;&gt; regressor = DecisionTreeRegressor(random_state=0)\n&gt;&gt;&gt; cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeRegressor"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "😂",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]
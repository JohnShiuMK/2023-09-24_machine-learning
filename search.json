[
  {
    "objectID": "03_reducing-generalization-error.html",
    "href": "03_reducing-generalization-error.html",
    "title": "Reducing Generalization Error",
    "section": "",
    "text": "Fundamental goal of ML: To generalize beyond what we see in the training samples\nWe often have access to only limited amount of training data, but we want to learn a mapping function which would predicts target reasonably well beyond that training data\nHowever, it’s impossible to access generalization error in practice!\nSolution (a common way): To reduce and approximate this error by Data Splitting"
  },
  {
    "objectID": "03_reducing-generalization-error.html#purpose",
    "href": "03_reducing-generalization-error.html#purpose",
    "title": "Reducing Generalization Error",
    "section": "",
    "text": "Fundamental goal of ML: To generalize beyond what we see in the training samples\nWe often have access to only limited amount of training data, but we want to learn a mapping function which would predicts target reasonably well beyond that training data\nHowever, it’s impossible to access generalization error in practice!\nSolution (a common way): To reduce and approximate this error by Data Splitting"
  },
  {
    "objectID": "03_reducing-generalization-error.html#how",
    "href": "03_reducing-generalization-error.html#how",
    "title": "Reducing Generalization Error",
    "section": "How?",
    "text": "How?\n\n80%-20% train-test split\n\n\n\nprepare df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/canada_usa_cities.csv\")\ndf\n\n\n\n\n\n\n\n\n\nlongitude\nlatitude\ncountry\n\n\n\n\n0\n-130.0437\n55.9773\nUSA\n\n\n1\n-134.4197\n58.3019\nUSA\n\n\n2\n-123.0780\n48.9854\nUSA\n\n\n3\n-122.7436\n48.9881\nUSA\n\n\n4\n-122.2691\n48.9951\nUSA\n\n\n...\n...\n...\n...\n\n\n204\n-72.7218\n45.3990\nCanada\n\n\n205\n-66.6458\n45.9664\nCanada\n\n\n206\n-79.2506\n42.9931\nCanada\n\n\n207\n-72.9406\n45.6275\nCanada\n\n\n208\n-79.4608\n46.3092\nCanada\n\n\n\n\n209 rows × 3 columns\n\n\n\n\nfrom sklearn.model_selection import train_test_split\ndf_1 = df.copy()\ny, X = df_1.pop(\"country\"), df_1\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=123\n)\n\n\n\nalternative method (in case of performing exploratory data analysis or visualization on the df_train)\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\n# # or, via train_size,\n# df_train, df_test = train_test_split(\n#     df, train_size=0.8, random_state=123\n# )\n\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n\n\n\nvisualize training data\nimport mglearn\nimport matplotlib.pyplot as plt\n\nmglearn.discrete_scatter(X_train['longitude'], X_train['latitude'], y_train, s=12)\nplt.xlabel('longitude')\nplt.ylabel('latitude')\n\n\nText(0, 0.5, 'latitude')\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\nprint(f\"Train accuracy: {round(clf.score(X_train, y_train), 3)}\")\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error\n\nTrain accuracy: 1.0\nTest accuracy: 0.738\n\n\n\nCons\n\nApproximated the generalization error, but not reduced yet.\nWe have built a perfect model on training data, but our model is not able to generalize well on the testing data!\n\n\n\n\nTrain-validation-test split\n\nWe train our model using train split\nAnd score it using validation split\nIf the score is not good, then we train another model using train split and score it again using validation split\nRepeat the process until reaching a satisfactory score in the validation split (i.e. hyperparameter tuning)\nTest the model once to examine the generalization \n\n\n\n\n\nfit\nscore\npredict\n\n\n\n\nTrain\n✔️\n✔️\n✔️\n\n\nValidation\n\n✔️\n✔️\n\n\nTest\n\nonce\nonce\n\n\nDeployment\n\n\n✔️\n\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ndf_train, df_validation = train_test_split(\n    df_train, test_size=0.25, random_state=123\n)\n\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_validation, X_validation = df_validation.pop(\"country\"), df_validation\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    clf.fit(X_train, y_train)\n\n    #print(f\"Train accuracy (max_depth={depth}): {round(clf.score(X_train, y_train), 3)}\")\n    print(f\"Validation accuracy (max_depth={depth}): {round(clf.score(X_validation, y_validation), 3)}\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error\n\nValidation accuracy (max_depth=1): 0.81\nValidation accuracy (max_depth=2): 0.81\nValidation accuracy (max_depth=3): 0.833\nValidation accuracy (max_depth=4): 0.833\nValidation accuracy (max_depth=5): 0.905\nValidation accuracy (max_depth=6): 0.881\nTest accuracy: 0.762\n\n\nWe typically expect \\(E_{train} &lt; E_{validation} &lt; E_{test} &lt; E_{deployment}\\).\n\nPros\n\nAble to reduce and approximate generalization error\nMuch better than Train-test split, in which we have only examined the training accuracy before looking at testing.\n\n\n\nCons\n\nIf the data set is small, then the validation set will be tiny and will not be a good representative of testing set.\n\n\n\n\nCross-validation\n\nSplit the training data into k-fold\nEach “fold” takes turn to be a validation set\nValidation score statistics = mean/variance of each cross-validation score (scores across folds) \n\n\ntraining and validation\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# train model and score\nclf = DecisionTreeClassifier(max_depth=4)\nscores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\nscores = pd.DataFrame(scores)\nscores\n\n\n\n\n\n\n\n\nfit_time\nscore_time\ntest_score\ntrain_score\n\n\n\n\n0\n0.002475\n0.001612\n0.764706\n0.913333\n\n\n1\n0.002041\n0.001354\n0.823529\n0.906667\n\n\n2\n0.002404\n0.001687\n0.705882\n0.906667\n\n\n3\n0.001020\n0.000641\n0.941176\n0.900000\n\n\n4\n0.001350\n0.000583\n0.823529\n0.906667\n\n\n5\n0.000838\n0.000573\n0.823529\n0.913333\n\n\n6\n0.000819\n0.000559\n0.705882\n0.920000\n\n\n7\n0.000820\n0.000930\n0.937500\n0.900662\n\n\n8\n0.000811\n0.000564\n0.937500\n0.900662\n\n\n9\n0.000831\n0.000570\n0.937500\n0.900662\n\n\n\n\n\n\n\n\nprint(f\"Average cv scores: {round(scores['test_score'].mean(), 2)}\")\nprint(f\"SD of cv scores: {round(scores['test_score'].var()**0.5, 2)}\")\n\nAverage cv score: 0.84\nSD of cv score: 0.09\n\n\n\n\ntraining, validation and testing\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.tree import DecisionTreeClassifier # example\n\n# data split\ndf_train, df_test = train_test_split(\n    df, test_size=0.2, random_state=123\n)\ny_train, X_train = df_train.pop(\"country\"), df_train\ny_test, X_test = df_test.pop(\"country\"), df_test\n\n# (iteratively) train model and score\nfor depth in range(1, 7):\n    clf = DecisionTreeClassifier(max_depth=depth)\n    scores = cross_validate(clf, X_train, y_train, cv=10, return_train_score=True) # is a dictionary\n    scores = pd.DataFrame(scores)\n\n    print(f\"Average cv scores (max_depth={depth}): {round(scores['test_score'].mean(), 3)}\")\n    print(f\"SD of cv scores (max_depth={depth}): {round(scores['test_score'].var()**0.5, 3)}\\n\")\n\n# test model\nclf = DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train, y_train)\nprint(f\"Test accuracy: {round(clf.score(X_test, y_test), 3)}\") # ~ generalization error, comparable to cv error\n\nAverage cv scores (max_depth=1): 0.81\nSD of cv scores (max_depth=1): 0.089\n\nAverage cv scores (max_depth=2): 0.804\nSD of cv scores (max_depth=2): 0.09\n\nAverage cv scores (max_depth=3): 0.804\nSD of cv scores (max_depth=3): 0.094\n\nAverage cv scores (max_depth=4): 0.84\nSD of cv scores (max_depth=4): 0.095\n\nAverage cv scores (max_depth=5): 0.846\nSD of cv scores (max_depth=5): 0.087\n\nAverage cv scores (max_depth=6): 0.815\nSD of cv scores (max_depth=6): 0.064\n\nTest accuracy: 0.81\n\n\n\n\nPros\n\nMore powerful, also applied to small data set!\nAble to examine the variation in the scores across folds\nGive a more robust estimate of error on unseen data"
  },
  {
    "objectID": "03_reducing-generalization-error.html#remarks",
    "href": "03_reducing-generalization-error.html#remarks",
    "title": "Reducing Generalization Error",
    "section": "Remarks",
    "text": "Remarks\n\nWe use test error to approximate generalization error (or deployment error)\nIf the test error is “reasonable”, we will deploy the model\nWe typically expect \\(E_{\\text{train}} &lt; E_{\\text{validation}} &lt; E_{\\text{test}} &lt; E_{\\text{deployment}} &lt; E_{\\text{best}}\\).\n\n\nWhat is underfitting?\n\nThe model is too simple\nBoth train and validation error are similarly high\n\\(E_{\\text{best}} &lt; E_{\\text{train}} \\lesssim E_{\\text{validation}}\\)\n\n\n\nWhat is overfitting?\n\nThe model is too complicated, and specified to training data only\nTraining error is too low, and a big gap exists between training and validation error\n\\(E_{\\text{train}} &lt; E_{\\text{best}} &lt; E_{\\text{validation}}\\)\n\n\n\nWhat is Bias vs. Variance tradeoff?\n\nA fundamental tradeoff in supervised learning\n\nComplexity \\(\\uparrow\\) \\(\\Rightarrow\\) \\(E_\\text{train} \\downarrow\\) but \\((E_\\text{validation} - E_\\text{train}) \\uparrow\\)\n\nBias \\(\\Leftrightarrow\\) Underfitting: the tendency to consistently learn the same wrong thing\nVariance \\(\\Leftrightarrow\\) Overfitting: the tendency to learn random things irrespective of real signals\n\n source\n\n\nGolden rule: The test data cannot influence the training phase in any way\n\nTo avoid breaking it, we always keep our testing set in an imaginary vault when we’re splitting data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "😂",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "02_decision-tree.html",
    "href": "02_decision-tree.html",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#use-case",
    "href": "02_decision-tree.html#use-case",
    "title": "Decision Tree",
    "section": "",
    "text": "???"
  },
  {
    "objectID": "02_decision-tree.html#what-is-it",
    "href": "02_decision-tree.html#what-is-it",
    "title": "Decision Tree",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: ???\n\nAt each node, the algorithm learns/decides\n\nwhich feature is the most useful for classification at that point\nwhat threshold to use\nobjective: to reduce impurity at each node\n\n\nFor regression: ???"
  },
  {
    "objectID": "02_decision-tree.html#how",
    "href": "02_decision-tree.html#how",
    "title": "Decision Tree",
    "section": "How?",
    "text": "How?\n\n\ndefine display_tree\n# Reference: DSCI_571_sup-learn-1/lectures/code/utils.py\nimport re \nimport graphviz\n\nfrom sklearn.tree import export_graphviz\n\ndef display_tree(feature_names, tree, counts=False):\n    \"\"\" For binary classification only \"\"\"\n    dot = export_graphviz(\n        tree,\n        out_file=None,\n        feature_names=feature_names,\n        class_names=tree.classes_.astype(str),\n        impurity=False,\n    )    \n    # adapted from https://stackoverflow.com/questions/44821349/python-graphviz-remove-legend-on-nodes-of-decisiontreeclassifier\n    # dot = re.sub('(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])(\\\\\\\\nclass = [A-Za-z0-9]+)', '', dot)\n    if counts: \n        dot = re.sub(\"(samples = [0-9]+)\\\\\\\\n\", \"\", dot)\n        dot = re.sub(\"value\", \"counts\", dot)\n    else:\n        dot = re.sub(\"(\\\\\\\\nsamples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\", \"\", dot)\n        dot = re.sub(\"(samples = [0-9]+)(\\\\\\\\nvalue = \\[[0-9]+, [0-9]+\\])\\\\\\\\n\", \"\", dot)\n\n    return graphviz.Source(dot)\n\n\n\n\ndefine plot_tree_decision_boundary_and_tree\n# Reference: DSCI_571_sup-learn-1_students/lectures/code/plotting_functions.py\nimport matplotlib.pyplot as plt\nimport mglearn\nfrom sklearn.tree import plot_tree\n\n# Custom function to customize the tree plot and hide values and samples\ndef custom_plot_tree(tree_model, feature_names=None, class_names=None, **kwargs):\n    \"\"\"\n    Customizes and displays a tree plot for a scikit-learn Decision Tree Classifier.\n\n    Parameters:\n    - tree (sklearn.tree.DecisionTreeClassifier): The trained Decision Tree Classifier to visualize.\n    - width: width of the matplotlib plot in inches \n    - height: height of the matplotlib plot in inches \n    - feature_names (list or None): A list of feature names to label the tree nodes with feature names.\n                                    If None, generic feature names will be used.\n    - class_names (list or None): A list of class names to label the tree nodes with class names.\n                                  If None, generic class names will be used.\n    - **kwargs: Additional keyword arguments to be passed to the `sklearn.tree.plot_tree` function.\n\n    Returns:\n    - None: The function displays the customized tree plot using Matplotlib.\n    \n    This function customizes the appearance of a Decision Tree plot generated by the scikit-learn\n    `plot_tree` function. It hides both the samples and values in each node of the tree plot\n    for improved visualization.\n    \"\"\"    \n    plot_tree(tree_model, \n              feature_names=feature_names, \n              class_names=class_names, \n              filled=True, \n              **kwargs)\n    \n    # Customize the appearance of the text elements for each node\n    for text in plt.gca().texts:\n        new_text = re.sub('samples = \\d+\\n', '', text.get_text()) # Hide samples\n        text.set_text(new_text) \n    \n    plt.show()\n\ndef plot_tree_decision_boundary(\n    model, X, y, x_label=\"x-axis\", y_label=\"y-axis\", eps=None, ax=None, title=None\n):\n    if ax is None:\n        ax = plt.gca()\n\n    if title is None:\n        title = \"max_depth=%d\" % (model.tree_.max_depth)\n\n    mglearn.plots.plot_2d_separator(\n        model, X.to_numpy(), eps=eps, fill=True, alpha=0.5, ax=ax\n    )\n    mglearn.discrete_scatter(X.iloc[:, 0], X.iloc[:, 1], y, ax=ax)\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.set_title(title)\n\ndef plot_tree_decision_boundary_and_tree(\n    model, X, y, height=6, width=16, fontsize = 9, x_label=\"x-axis\", y_label=\"y-axis\", eps=None\n):\n    fig, ax = plt.subplots(\n        1,\n        2,\n        figsize=(width, height),\n        subplot_kw={\"xticks\": (), \"yticks\": ()},\n        gridspec_kw={\"width_ratios\": [1.5, 2]},\n    )\n    plot_tree_decision_boundary(model, X, y, x_label, y_label, eps, ax=ax[0])\n    custom_plot_tree(model, \n                 feature_names=X.columns.tolist(), \n                 class_names=['A+', 'not A+'],\n                 impurity=False,\n                 fontsize=fontsize, ax=ax[1])\n    ax[1].set_axis_off()\n    plt.show()\n\n\n\nClassification\n\n\nread df\nimport pandas as pd\n\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\nA+\n\n\n1\n1\n0\n94\n90\n80\n83\n91\nnot A+\n\n\n2\n0\n0\n78\n85\n83\n80\n80\nnot A+\n\n\n3\n0\n1\n91\n94\n92\n91\n89\nA+\n\n\n4\n0\n1\n77\n83\n90\n92\n85\nA+\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ny, X = df.pop(\"quiz2\"), df\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\nclf.predict(X)\n\narray(['A+', 'not A+', 'not A+', 'A+', 'A+', 'not A+', 'A+', 'not A+',\n       'not A+', 'not A+', 'A+', 'A+', 'A+', 'A+', 'not A+', 'not A+',\n       'A+', 'not A+', 'not A+', 'not A+', 'A+'], dtype=object)\n\n\n\nclf.score(X, y) # accuracy\n\n1.0\n\n\n\ndisplay_tree(X.columns, clf)\n\n\n\n\n\nDecision stump\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = df[['lab4', 'quiz1']]\n\nclf = DecisionTreeClassifier(max_depth=1)\nclf.fit(X, y)\nclf.predict(X)\n\nplot_tree_decision_boundary_and_tree(clf, X, y, x_label='lab4', y_label='quiz1')\n\n/Users/johnshiu/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n  warnings.warn(\n\n\n\n\n\n\n\n\nRegression\n\n\nread df\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\nquiz2\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n90\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n84\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n82\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n92\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n90\n\n\n\n\n\n\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ny, X = df.pop(\"quiz2\"), df\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2 (it can be -ve, which is worse than DummyRegressor)\n\n0.0"
  },
  {
    "objectID": "02_decision-tree.html#hyperparameters",
    "href": "02_decision-tree.html#hyperparameters",
    "title": "Decision Tree",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\ncriterion for minimizing impurity\n\n(DecisionTreeClassifier) Default: gini\n\ngini: gini index\nentropy: cross entropy\nlog_loss: information gain\n\n(DecisionTreeRegressor) Default: squared_error\n\n{squared_error, friedman_mse, absolute_error, poisson}\n\n\nmax_depth, maximum tree depth. Default: None\n\nIf None, the decision tree could be creating very specific rules, based on just one example from the data\nIf max_depth = 1, the tree is called Decision stump\n\nmin_samples_split\nmin_samples_leaf\nmax_leaf_nodes"
  },
  {
    "objectID": "02_decision-tree.html#pros",
    "href": "02_decision-tree.html#pros",
    "title": "Decision Tree",
    "section": "Pros",
    "text": "Pros"
  },
  {
    "objectID": "02_decision-tree.html#cons",
    "href": "02_decision-tree.html#cons",
    "title": "Decision Tree",
    "section": "Cons",
    "text": "Cons"
  },
  {
    "objectID": "02_decision-tree.html#remarks",
    "href": "02_decision-tree.html#remarks",
    "title": "Decision Tree",
    "section": "Remarks",
    "text": "Remarks\n\n?DecisionTreeClassifier\n\n?DecisionTreeClassifier\n\n\nInit signature:\nDecisionTreeClassifier(\n    *,\n    criterion='gini',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    class_weight=None,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree classifier.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n    The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nclass_weight : dict, list of dict or \"balanced\", default=None\n    Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n    For multi-output, the weights of each column of y will be multiplied.\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nclasses_ : ndarray of shape (n_classes,) or list of ndarray\n    The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem).\nfeature_importances_ : ndarray of shape (n_features,)\n    The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_classes_ : int or list of int\n    The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems).\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeRegressor : A decision tree regressor.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_iris\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeClassifier\n&gt;&gt;&gt; clf = DecisionTreeClassifier(random_state=0)\n&gt;&gt;&gt; iris = load_iris()\n&gt;&gt;&gt; cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeClassifier\n\n\n\n\n\n?DecisionTreeRegressor\n\n?DecisionTreeRegressor\n\n\nInit signature:\nDecisionTreeRegressor(\n    *,\n    criterion='squared_error',\n    splitter='best',\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    ccp_alpha=0.0,\n)\nDocstring:     \nA decision tree regressor.\nRead more in the :ref:`User Guide &lt;tree&gt;`.\nParameters\n----------\ncriterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"\n    The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n    .. versionadded:: 0.24\n        Poisson deviance criterion.\nsplitter : {\"best\", \"random\"}, default=\"best\"\n    The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split.\nmax_depth : int, default=None\n    The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\nmin_samples_split : int or float, default=2\n    The minimum number of samples required to split an internal node:\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_samples_leaf : int or float, default=1\n    The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n    .. versionchanged:: 0.18\n       Added float values for fractions.\nmin_weight_fraction_leaf : float, default=0.0\n    The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided.\nmax_features : int, float or {\"auto\", \"sqrt\", \"log2\"}, default=None\n    The number of features to consider when looking for the best split:\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features.\nrandom_state : int, RandomState instance or None, default=None\n    Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features &lt; n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary &lt;random_state&gt;` for details.\nmax_leaf_nodes : int, default=None\n    Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes.\nmin_impurity_decrease : float, default=0.0\n    A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n    The weighted impurity decrease equation is the following::\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n    .. versionadded:: 0.19\nccp_alpha : non-negative float, default=0.0\n    Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details.\n    .. versionadded:: 0.22\nAttributes\n----------\nfeature_importances_ : ndarray of shape (n_features,)\n    The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative.\nmax_features_ : int\n    The inferred value of max_features.\nn_features_in_ : int\n    Number of features seen during :term:`fit`.\n    .. versionadded:: 0.24\nfeature_names_in_ : ndarray of shape (`n_features_in_`,)\n    Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n    .. versionadded:: 1.0\nn_outputs_ : int\n    The number of outputs when ``fit`` is performed.\ntree_ : Tree instance\n    The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes.\nSee Also\n--------\nDecisionTreeClassifier : A decision tree classifier.\nNotes\n-----\nThe default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\nExamples\n--------\n&gt;&gt;&gt; from sklearn.datasets import load_diabetes\n&gt;&gt;&gt; from sklearn.model_selection import cross_val_score\n&gt;&gt;&gt; from sklearn.tree import DecisionTreeRegressor\n&gt;&gt;&gt; X, y = load_diabetes(return_X_y=True)\n&gt;&gt;&gt; regressor = DecisionTreeRegressor(random_state=0)\n&gt;&gt;&gt; cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])\nFile:           ~/miniconda3/envs/571/lib/python3.11/site-packages/sklearn/tree/_classes.py\nType:           ABCMeta\nSubclasses:     ExtraTreeRegressor\n\n\n\n\n\nCode\n# import numpy as np\n# X_binary = X.copy()\n# X_binary.loc[:,\"lab1\":\"quiz1\"] = X_binary.loc[:,\"lab1\":\"quiz1\"].apply(lambda x: np.where(x &gt;= 90, 1, 0))\n\n# from sklearn.tree import DecisionTreeClassifier\n# clf = DecisionTreeClassifier()\n# clf.fit(X_binary, y)\n# clf.predict(X_binary)\n\n# clf.score(X_binary, y) # accuracy\n\n# display_tree(X_binary.columns, clf)"
  },
  {
    "objectID": "01_dummy.html",
    "href": "01_dummy.html",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#use-case",
    "href": "01_dummy.html#use-case",
    "title": "Dummy Classifier/Regressor",
    "section": "",
    "text": "Serve as baseline, a simple ML algo based on simple rules of thumb"
  },
  {
    "objectID": "01_dummy.html#what-is-it",
    "href": "01_dummy.html#what-is-it",
    "title": "Dummy Classifier/Regressor",
    "section": "What is it?",
    "text": "What is it?\n\nFor classification: use the mode of y_train to predict y_test\nFor regression: use the mean / median / constant value of y_train to predict y_test"
  },
  {
    "objectID": "01_dummy.html#how",
    "href": "01_dummy.html#how",
    "title": "Dummy Classifier/Regressor",
    "section": "How?",
    "text": "How?\n\nClassification\n\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-classification.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyClassifier\n\nclf = DummyClassifier(strategy=\"most_frequent\")\nclf.fit(X, y)\nclf.predict(X)\n\narray(['not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+', 'not A+', 'not A+', 'not A+',\n       'not A+', 'not A+', 'not A+'], dtype='&lt;U6')\n\n\n\nclf.score(X, y) # accuracy\n\n0.5238095238095238\n\n\n\n\nRegression\n\nimport pandas as pd\n\n# Prepare data\ndf = pd.read_csv(\"data/quiz2-grade-toy-regression.csv\")\ny, X = df.pop(\"quiz2\"), df\nX.head()\n\n\n\n\n\n\n\n\nml_experience\nclass_attendance\nlab1\nlab2\nlab3\nlab4\nquiz1\n\n\n\n\n0\n1\n1\n92\n93\n84\n91\n92\n\n\n1\n1\n0\n94\n90\n80\n83\n91\n\n\n2\n0\n0\n78\n85\n83\n80\n80\n\n\n3\n0\n1\n91\n94\n92\n91\n89\n\n\n4\n0\n1\n77\n83\n90\n92\n85\n\n\n\n\n\n\n\n\nfrom sklearn.dummy import DummyRegressor\n\nreg = DummyRegressor(strategy=\"mean\")\nreg.fit(X, y)\nreg.predict(X)\n\narray([86.28571429, 86.28571429, 86.28571429, 86.28571429, 86.28571429,\n       86.28571429, 86.28571429])\n\n\n\nreg.score(X, y) # R^2\n\n0.0"
  },
  {
    "objectID": "01_dummy.html#hyperparameters",
    "href": "01_dummy.html#hyperparameters",
    "title": "Dummy Classifier/Regressor",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nstrategy\n\n(DummyClassifier) {“most_frequent”, “prior”, “stratified”, “uniform”, “constant”}. Default: “prior”\n(DummyRegressor) {“mean”, “median”, “quantile”, “constant”}. Default: “mean”\n\nconstant\n\nspecified if strategy = \"constant\"\nfor DummyClassifier, the constant must exist in the y"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]